[
  {
    "objectID": "til.html",
    "href": "til.html",
    "title": "Today I learn",
    "section": "",
    "text": "Postgresql JOIN USING vs JOIN ON ü•û\n\n\n\n\n\n\n\n\n\n\n\nAug 26, 2024\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nClear docker cache\n\n\n\n\n\n\n\n\n\n\n\nAug 16, 2024\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nHow to Save & Load FastAI Model\n\n\n\n\n\n\n\n\n\n\n\nJul 19, 2024\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\nCreating DataBlock from Numpy Array\n\n\n\n\n\n\n\n\n\n\n\nJun 20, 2024\n\n\n2 min\n\n\n\n\n\n\n\n\n\n\n\n\nIncompleteRead When Downloading From ü™£ AWS S3\n\n\n\n\n\n\n\n\n\n\n\nJun 20, 2024\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nFastai Lesson0 Key Insights\n\n\n\n\n\n\n\n\n\n\n\nJun 19, 2024\n\n\n2 min\n\n\n\n\n\n\n\n\n\n\n\n\nHow to build üê≥ Docker Image & run Container\n\n\n\n\n\n\n\n\n\n\n\nJun 19, 2024\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\nTabularPandas AttributeError: classes\n\n\n\n\n\n\n\n\n\n\n\nJun 13, 2024\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nConda ImportError when trying to run python file\n\n\n\n\n\n\n\n\n\n\n\nMay 14, 2024\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nConda ValueError when trying to open jupyter notebook\n\n\n\n\n\n\n\n\n\n\n\nMay 13, 2024\n\n\n2 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/frontend_crash_course_part2.html",
    "href": "blog/frontend_crash_course_part2.html",
    "title": "Front-end Web Dev Crash Course Part 2/4",
    "section": "",
    "text": "This is part 2/4 notes of a Youtube Front-end web development crash course."
  },
  {
    "objectID": "blog/frontend_crash_course_part2.html#objects-vs-primitive",
    "href": "blog/frontend_crash_course_part2.html#objects-vs-primitive",
    "title": "Front-end Web Dev Crash Course Part 2/4",
    "section": "Objects vs Primitive",
    "text": "Objects vs Primitive\n\nPrimitive is a simplest form of something. What is Javascript primitive?\n\nString\nNumber\nBoolean\nUndefined\nNull\nBigInt\nSymbols\n\nPrimitive data types does not have any methods or functions you can call on it. But when use built-in functions on it, Javascript wraped the primitive and changed it into an object behind the scene. ``` // ‚Äúsome string‚Äù here is a primitive data type, but when we call .toUpperCase() Javascript convert the primitive to a String() object console.log(‚Äúsome string‚Äù.toUpperCase()) // [Output] SOME STRING\n```\nObject != primitive. But as we‚Äôve seen above, primitive is converted into an object directly behind the scene by Javascript (and it is not something we need to worry about, since Javascript does it for us when needed). Eg: ``const string1 = new String('Hello, world!'); // an object, note we use thenew` constructor here. and note, it is not recommended to write this way as code may break. const string2 = ‚ÄòHello, world!‚Äô // a primitive, note this is the correct way to create a string.\n// triple equality check for both data types and value console.log(string1 === string2); // false\n// double equality check for value console.log(string1 == string2); // true ```\nWhat does the new operator do?\n\nIt first creates a blank object, then link the blank object to the parent\n\n// creating a new instance of Date() object\nconst myDate = new Date();"
  },
  {
    "objectID": "blog/frontend_crash_course_part2.html#html-tags",
    "href": "blog/frontend_crash_course_part2.html#html-tags",
    "title": "Front-end Web Dev Crash Course Part 2/4",
    "section": "HTML tags",
    "text": "HTML tags\n\nIf a website is a house:\n\n\n\n\nimage.png\n\n\n\nWhat is HTML?\n\nStands for HyperText Markup Language.\nSomething that allows you to structure the components that you‚Äôre going to put on a webpage.\nEach website has 1 HTML document within it. This HTML document has general structure. \nEverything within &lt;html&gt;&lt;/html&gt; tag defined the whole document.\nWithin the html tags, you‚Äôd have &lt;head&gt;&lt;/head&gt; tag, that has &lt;title&gt;&lt;/title&gt; tag ‚Äì this define the name you see on the browser tab.\nThe bulk of your website is defined within &lt;body&gt;&lt;/body&gt; tag.\nBelow is a standard boilerplate that has HTML, CSS and Javascript.\n\n&lt;link&gt;&lt;/link&gt; tag references the CSS stylesheet.\n&lt;script&gt;&lt;/script&gt; tag references the javascript script that is connected to this HTML that gives it function. \n\nBasic anatomy of a HTML element. \n\nThe class attribute of a HTML element is how we identify the HTML tag from CSS. But this doesn‚Äôt mean all HTML attributes relate to CSS.\n\n\nHTML element vs HTML tag:\n\nHTML element: A complete unit (ie tag + attributes + event listeners etc). Can also think of it as the general structure of that HTML. Eg. &lt;p id=\"p1\" class=\"some-class\"&gt;Content Here&lt;/p&gt;\nHTML tag: Think of it as the function ‚Äì what the element is supposed to be doing. Eg. &lt;p&gt;&lt;/p&gt;\n\nTypes of HTML tags:\n\nNormal HTML tags: tag with opening and closing &lt;p&gt;&lt;/p&gt;       &lt;h1&gt;&lt;/h1&gt;       &lt;div&gt;&lt;/div&gt; --&gt; generic container element       &lt;span&gt;&lt;/span&gt; --&gt; use this to style. Can be nested within other tags eg `&lt;p&gt;&lt;/p&gt;`       &lt;strong&gt;&lt;/strong&gt; --&gt; make something bold       &lt;em&gt;&lt;/em&gt; --&gt; make something italic       &lt;a&gt;&lt;/a&gt; --&gt; to add hyperlink to HTML. Must contain `href` attribute       &lt;button&gt;&lt;/button&gt; --&gt; add clickable button       &lt;ul&gt;&lt;/ul&gt; --&gt; unordered list (bullet points)       &lt;li&gt;&lt;/li&gt; --&gt; nested inside &lt;ul&gt;&lt;/ul&gt;. Represent an element in a list       &lt;ol&gt;&lt;/ol&gt; --&gt; ordered list (numbered list)       &lt;table&gt;&lt;/table&gt; --&gt; table as a container\n\nWe can nest other HTML tags within these normal tags. Especially for tags that are meant to be used as container-like (eg the &lt;div&gt;&lt;/div&gt; tag.)\nBut for some tags (eg the paragraph tag), it does not make sense to nest other tags within them.\n\nSelf-closing HTML tags: &lt;img /&gt; --&gt; use this to attach image to the HTML       &lt;input /&gt; --&gt; use this to create interactive controls to accept user input       &lt;meta /&gt; --&gt; this goes in the head of the HTML document       &lt;link /&gt; --&gt; this is how we link the style sheet with HTML\n\nCan not nest other HTML tags within these self-closing tags.\n\n\nHTML is not case sensitive. &lt;p&gt;&lt;/p&gt; == &lt;P&gt;&lt;/P&gt; both works fine.\nHTML does not care about line breaks.\nIn new HTML 5 standards, it is recommended to only do styling from CSS and not within HTML.\nHow to connect HTML button to event listener: ``` // in HTML Submit\n// in JavaScript function alertMe(){ alert(‚ÄòButton is clicked‚Äô) } ```"
  },
  {
    "objectID": "blog/frontend_crash_course_part2.html#html-attributes",
    "href": "blog/frontend_crash_course_part2.html#html-attributes",
    "title": "Front-end Web Dev Crash Course Part 2/4",
    "section": "HTML attributes",
    "text": "HTML attributes\n\nGlobal attribute vs Element specific attribute:\n\nGlobal attribute: attributes that‚Äôs available to any HTML element\nElement specific attribute: Only applicable to certain elements\nIn the example below:\n\nsrc and width are element specific attributes. Think of these as methods that are only applicable to certain objects. Eg, toUpperCase() is only applicable to string object and won‚Äôt do anything on number object.\nclass attribute is global attribute\n\n&lt;img src=\"https://....\" class=\"some-style\" width=\"200\"&gt;"
  },
  {
    "objectID": "blog/frontend_crash_course_part2.html#about-working-in-codepen",
    "href": "blog/frontend_crash_course_part2.html#about-working-in-codepen",
    "title": "Front-end Web Dev Crash Course Part 2/4",
    "section": "About working in Codepen",
    "text": "About working in Codepen\n\nIf we are working in codepen and wanted to test out Javascript code before adding into the JS section of the codepen, we could use the console to do this. Here‚Äôs how:\n\nRight click anywhere on the page ‚Üí Inspect\nIn the dropdown, select CodePen (Index.html) environment, this will make sure we are refering to the right context.\nNow we can use document.queryselector() to get tags from our Codepen HTML section.\n\n\n\n\nimage.png\n\n\nThe codepen environment has already do the necessary linking of Javascript and CSS to the HTML script, so we don‚Äôt need to do it manually.\nCodepen has already wrapped the HTML document within &lt;html&gt;&lt;/html&gt; tag, so we don‚Äôt have to do this. Whatever we inserted in the HTML panel within the codepen is inserted within &lt;body&gt;&lt;/body&gt; tag.\n\nHow do we know this? In the console, we retrieved the entire HTML document and notice that there are html and head tags which we did not define in the codepen HTML panel."
  },
  {
    "objectID": "blog/frontend_crash_course_part2.html#document-object-model-dom",
    "href": "blog/frontend_crash_course_part2.html#document-object-model-dom",
    "title": "Front-end Web Dev Crash Course Part 2/4",
    "section": "Document Object Model (DOM)",
    "text": "Document Object Model (DOM)\n\nThink of it as a bridge between HTML and Javascript.\nDOM is the root of any front-end framework we‚Äôll work with.\nWhat is DOM?\n\nnot a programming language\nnot natively part of Javascript\nonly exist within the browser (all browsers have slightly different implementation of the DOM)\ncan think of it as an API for an HTML document\nallow us to manipulate HTML without knowing how is HTML being manipulated by the browser\n\nHTML alone is like paper map, but when we add the DOM API + HTML then we can make it like a google map, where we introduce a lot of interactivity into it.\nElement is the most general base class for which all element objects in a document inherit.\nRelationship between HTML and DOM:\n\nAt the highest level, DOM has 2 built-in objects that we‚Äôll probably use more than any other objects that you‚Äôll look at.\nAt the very top level, you have the window object.\n\nWe can think this as literally the individual browser tab we‚Äôre working with.\nWe can program using this one object and do all sorts of things within a browser (eg scrolling, resizing browser window, refreshing the page) ‚Äì we can do these using Javascript by connecting it to DOM via the top level window object.\n\nDOM is an API to connnect to our browser in our HTML document. \n\ndocument is a representation of the entire HTML document we‚Äôve written. To access this we use window.document. \nThink of the HTML document as a tree \n\nIn the document object model, we call all of the elements as nodes within the DOM tree.\nEach element is defined as a total unit which is made of several different type of nodes:\n\n\n\nimage-4.png\n\n\n\nthe simplest level: element node Eg. &lt;p&gt;\nthe attributes: attribute node Eg. class=\"some-class\"\nthe content: content node Eg. Content\n\nWe can create the above element entirely in Javascript and insert it into the HTML document using DOM API as shown below. \n\nHowever, this inserted element is temporary. We normally use it for user experience ‚Äì when user does some changes on the website, we want to immediately show the changes, and this can be done using Javascript through the DOM API to modify elements that are existing within the HTML.\nWe later can save the changes to the database and reload it with new data later ‚Äì which might take a while, so we use Javascript + DOM for faster response."
  },
  {
    "objectID": "blog/frontend_crash_course_part2.html#window",
    "href": "blog/frontend_crash_course_part2.html#window",
    "title": "Front-end Web Dev Crash Course Part 2/4",
    "section": "Window",
    "text": "Window\n\nWe can use the top level window object to control over the browser. Examples on how we can manipulate the top level object Window via the DOM API ():\n\nTo throw a popup alert: In Inpect ‚Üí Console tool, we can make the browser show a popup using window.alert(message) or we could just directly write alert(message) ‚Äì we don‚Äôt even need to reference to window because it is the global object.\n\n \n\nTo open a new tab: window.open(url to open)\nTo scroll down a page: window.scrollBy({           top: window.innerHeight*100, // window.innerHeight is only the height in the current view, not the entire length of the browser tab (the total webpage height is window.outerHeight)           left: 0,           behavior: 'smooth'       });\nTo reload a page: window.location.reload();\n\nSome global properties are (can be refered by window.{property} or just {property} eg window.innerHeight or innerHeight):\n\nHeight / width of current view: innerHeight, innerWidth\nTotal height / width of the webpage (full scrollable length): outerHeight, outerWidth.\nAllows you to store data temporarily in the browser: localStorage.\n\nYou can check the temporarily saved data in Application tab of the Developer Inspect tool. \nYou can temporarily save data using the Console tool. Eg. localStorage.setItem(key, value). \n\nGet information about the website the current tab is on: location \nInformation on how much we‚Äôve scrolled (left-right) and (up-down) respectively: scrollX, scrollY\n\nSetting up event listener on the entire window\n\nWe set up a function that will be triggered everything user scroll the webpage.\nNotice there are 44 printed ‚Äúhi‚Äù on the Console."
  },
  {
    "objectID": "blog/frontend_crash_course_part2.html#html-element",
    "href": "blog/frontend_crash_course_part2.html#html-element",
    "title": "Front-end Web Dev Crash Course Part 2/4",
    "section": "HTML Element",
    "text": "HTML Element\n\nGlobal attribute: Attributes that we can set for every HTML element\n\nid: Eg. &lt;button id=\"btn-1\"&gt;&lt;/button&gt;\nclass: Eg &lt;button class=\"my-btn\"&gt;&lt;/button&gt;"
  },
  {
    "objectID": "blog/frontend_crash_course_part2.html#add-interactivity",
    "href": "blog/frontend_crash_course_part2.html#add-interactivity",
    "title": "Front-end Web Dev Crash Course Part 2/4",
    "section": "Add interactivity",
    "text": "Add interactivity\n\nTo add interactivity on HTML page, we need to do 3 steps:\n\nIdentify the element we want to add user interactivity on (eg a button element).\nRegister event listener on the element (eg a click event).\nCreate a function that will insert/ made changes to the HTML document every time user interacted with the element.\n\n\n\n\n\nimage.png\n\n\n\n(Step 1) There are multiple ways we could do to identify the element. Say the element we want to identify is the &lt;button&gt;&lt;/button&gt; element.\n\nUse tag selector: document.querySelector('button'). We refer to the tag directly by the tag button.\n\nThis will look through the whole HTML file and find the first occurance of the &lt;button&gt; tag.\nIf it doesn‚Äôt find it, it will return null.\n\nUse class selector: document.querySelector('.my-btn'). We refer to the class using ..\nUse id selector: document.querySelector('#btn-1'). We refer the id using #.\n\nor we could also use document.getElementById('btn-1') (getElementById documentation).\nSelecting element using id is the most specific way to do it, because we can not have multiple elements with the same id ‚Äì if we do this, it will cause conflict.\nWe want to always try to be as specific as we can when identifying element within the DOM.\n\nNotice that all querySelector we did below gave the same element. \nAdditional ways to do the same thing:\n\n\n\n\nimage-4.png\n\n\n\nRefer to this when trying to select element by tag/id/class. \n\n(Step 2) Register click event. There are 3 ways to do this:\n\nIn Javascript section: ``` // button we want to add click event to const btn = document.querySelector(‚Äò#btn-1‚Äô);\n// the function we want to execute when user click on the button (right now it is empty) function addParagrah() { }\n// method 1 btn.addEventListener(‚Äòclick‚Äô, addParagraph)\n// method 2 btn.onclick = addParagraph; // syntax {name of element}.{event handler property - see doc!} ```\n\nCheck out the Event documentation  to see what events we can add.\n\nIn HTML section: // add onclick attribute and set it to refer to the function we want to call       &lt;button id=\"btn-1\" class=\"my-btn\" onclick=\"addParagrah()\"&gt;CLICK ME&lt;/button&gt;\nWe can test if the implementation is working by printing some text on the console. \n\n(Step 3) Create a function that will be called upon user interaction. Here, our function is addParagraph() in the Javascript section. Below is the final implementation, notice that new paragraph is added to the end of the document everytime we click the button."
  },
  {
    "objectID": "blog/frontend_crash_course_part2.html#navigating-through-html-document",
    "href": "blog/frontend_crash_course_part2.html#navigating-through-html-document",
    "title": "Front-end Web Dev Crash Course Part 2/4",
    "section": "Navigating through HTML document",
    "text": "Navigating through HTML document\n\nSay we want to know what type of a variable we‚Äôre working with. What we can do is to save the element in a variable using Javascript then check its type using .nodeType. We can then check the node type in the MDN documentation (the simplest way to do this is to search ‚ÄúNodeType‚Äù on the search bar). Once we know what the node type we‚Äôre dealing with, we can then lookup its properties and attributes etc. Eg here, we get value of 1 from list.nodeType, and from the documentation, we know this is an element node. \nMake changes using Javascript \nAdd new element using Javascript \nAdd new element using Javascript when we want to insert in between tags that has no specific id/class.\n\nFrom Node interface documentation, we know we can use .insertBefore() method to add a new element before an existing element.\nFrom the documentation, the syntax guide for this method is parent element.insertBefore(newNode to insert, referenceNode we want to insert before).\nSay, we wanted to insert a new paragraph in between the 2 paragraphs tags that has no class/id that we could identify it by. The diagram below show how we can solve this step-by-step. \n\nEverything in the DOM is inherited from Node interface (think of object oriented program concept).\n\nWhich means everything below it (Element, HTMLElement etc) have access to its parent‚Äôs (Node) attributes, properties, methods etc on top of their own attributes, properties, methods etc."
  },
  {
    "objectID": "blog/frontend_crash_course_part2.html#quick-recap",
    "href": "blog/frontend_crash_course_part2.html#quick-recap",
    "title": "Front-end Web Dev Crash Course Part 2/4",
    "section": "Quick recap",
    "text": "Quick recap\n\nWe can think of HTML in 2 different parts:\n\nStatic HTML: This is the HTML we see below. No matter what we do, this will not change.\n\n\n\n\nimage.png\n\n\n\nDynamic HTML: This is what we see when we start working with the DOM to add/modify/remove etc elements with the existing static HTML.\n\nKey takeaway:\n\nWe can model a HTML document in a predictable way.\nWe can write specification called the document object model and allow Javascript to connect in with that API to actually modify the static HTML.\nIn the new HTML 5 spec, we should use HTML tag for both structure and intent. Eg instead of sectioning different part of a webpage in just &lt;div&gt;&lt;/div&gt; element, there are new tags available that we should use to better structure our webpage. Eg &lt;nav&gt;&lt;/nav&gt;, &lt;section&gt;&lt;/section&gt;, &lt;main&gt;&lt;/main&gt;, &lt;article&gt;&lt;/article&gt;, &lt;footer&gt;&lt;/footer&gt;. This is called semantic HTML.\n\n\n\nimage-2.png"
  },
  {
    "objectID": "blog/frontend_crash_course_part2.html#reference-1",
    "href": "blog/frontend_crash_course_part2.html#reference-1",
    "title": "Front-end Web Dev Crash Course Part 2/4",
    "section": "Reference",
    "text": "Reference\n\nMDN/Document Object Model (DOM): DOM documentation\nMDN/Events: List of events we could to elements on the web.\nMDN/Node: List of properties and methods of Node interface object\nMDN/nodeType: List of node types and its corresponding values"
  },
  {
    "objectID": "blog/smithwaterman_py.html",
    "href": "blog/smithwaterman_py.html",
    "title": "Smith-Waterman Local Alignment using Python",
    "section": "",
    "text": "Smith-Waterman is a local alignment method for sequence alignment. Below is example implementation using python.\n\n\n\n\n\n\n\nNote\n\n\n\nThis post was written using: - biopython: 1.78\n\n\n\nfrom typing import Union, List\n\nfrom Bio import Align\n\n\n\ndef get_score(A:str, B:str, mismatch_penalty:int, match_score:int) -&gt; int:\n    # match\n    if A == B:\n        return match_score\n    \n    # mismatch\n    return mismatch_penalty\n\ndef init_matrix(A: str, B: str) -&gt; list:\n    lenA = len(A) + 1\n    lenB = len(B) + 1\n    matrix = []\n    for i in range(lenB):\n        matrix.append([0] * lenA)\n\n    return matrix\n\n\ndef noNeg(x:int) -&gt; int:\n    return max(0, x)\n\n\ndef SmithWaterman(A, B, gap_penalty:int=-2, mismatch_penalty:int=-1, match_score:int=4) -&gt; Union[list, int, list]:\n    \"\"\" initialize matrix and fill\n\n    Returns:\n        list: 2D array of filled value according to Smith-Waterman algorithm\n        int: Max value in the final filled `matrix`\n        list: List of position [row, col] of `max_score` in `matrix`\n\n    \"\"\"\n    matrix = init_matrix(A, B)\n\n    # in sw, lower bound to 0\n    for m in range(len(matrix)):\n        for n in range(len(matrix[0])):\n            matrix[m][n] = noNeg(matrix[m][n])\n\n    diag = [[-1, -1]]\n    top = [[-1, 0]]\n    left = [[0, -1]]\n\n    max_score = 0\n    max_score_position = []\n\n    for row in range(1, len(B)+1):\n        for col in range(1, len(A)+1):\n            a_char = A[col-1]\n            b_char = B[row-1]\n\n            for dr,dc in left:\n                l = matrix[row + dr][col + dc] + gap_penalty\n\n            for dr,dc in top:\n                t = matrix[row + dr][col + dc] + gap_penalty\n            \n            for dr,dc in diag:\n                d = matrix[row + dr][col + dc] + get_score(a_char, b_char, mismatch_penalty, match_score)\n\n            # l,t,d lower bouded to 0 (SW property)\n            cur_score = max(noNeg(l), noNeg(t), noNeg(d))\n            if cur_score &gt; max_score:\n                max_score = cur_score\n                max_score_position = [row, col]\n\n            matrix[row][col] = cur_score\n\n    return matrix, max_score, max_score_position\n\n\ndef traceback(matrix: list, A: str, B: str,\n              max_score_position: list, \n              gap_penalty: int,\n              mismatch_penalty: int,\n              match_score: int) -&gt; List[str]:\n    aligned_A = []\n    aligned_B = []\n\n    row = max_score_position[0]\n    col = max_score_position[1]\n\n    while row &gt; 0 and col &gt; 0:\n        d = matrix[row - 1][col - 1]\n        t = matrix[row - 1][col]\n        l = matrix[row][col - 1]\n\n        # Stop when we reach a score of 0 (SW property)\n        if matrix[row][col] == 0:\n            break\n\n        # Diagonal move (match/mismatch)\n        if matrix[row][col] == d + get_score(A[col-1], B[row-1], mismatch_penalty, match_score):\n            aligned_A.append(A[col-1])\n            aligned_B.append(B[row-1])\n            row -= 1\n            col -= 1\n        # Left move (gap in B)\n        elif matrix[row][col] == l + gap_penalty:\n            aligned_A.append(A[col-1])\n            aligned_B.append('-')\n            col -= 1\n        # Top move (gap in A)\n        elif matrix[row][col] == t + gap_penalty:\n            aligned_A.append('-')\n            aligned_B.append(B[row-1])\n            row -= 1\n\n    return ''.join(reversed(aligned_A)), ''.join(reversed(aligned_B))\n\n\n## Params\n\nGAP_PENALTY = -2\nMISMATCH_PENALTY = -1\nMATCH_SCORE = 2\n\n\n\n\nA, B = \"AACG\", \"AATCG\"  # A = top, B = left\nmatrix, max_score, max_score_position = SmithWaterman(A, B,\n                                                      gap_penalty = GAP_PENALTY, \n                                                      mismatch_penalty = MISMATCH_PENALTY,\n                                                      match_score = MATCH_SCORE)\nfor m in matrix:\n    print(m)\n\n[0, 0, 0, 0, 0]\n[0, 2, 2, 0, 0]\n[0, 2, 4, 2, 0]\n[0, 0, 2, 3, 1]\n[0, 0, 0, 4, 2]\n[0, 0, 0, 2, 6]\n\n\n\nmax_score\n\n6\n\n\n\nmax_score_position\n\n[5, 4]\n\n\n\n\n\nimage-3.png\n\n\nAbove is the filled in matrix. The highlighted cell is the max_score.\n\nTraceback\n\n\naligned_A, aligned_B = traceback(matrix, A, B,\n                                  max_score_position,\n                                  gap_penalty = GAP_PENALTY,\n                                  mismatch_penalty = MISMATCH_PENALTY,\n                                  match_score = MATCH_SCORE)\n\nprint(\"Alignment:\")\nprint(aligned_A)\nprint(aligned_B)\n\nAlignment:\nAA-CG\nAATCG\n\n\n\n\n\nimage.png\n\n\nWe get same output with University of Freiburg Smith-Waterman Tool (Ref 1).\n\n\nGet alignment score\n\naligner = Align.PairwiseAligner()\naligner.mode = 'local'\n\nalignments = aligner.align(aligned_A.replace('-',''), \n                           aligned_B.replace('-',''))\n\nfor alignment in sorted(alignments):\n    print(\"Score = %.1f:\" % alignment.score)\n    print(alignment)\n\nScore = 4.0:\nAA-CG\n||-||\nAATCG\n\n\n\n\n\nReferences\n\nUniversity of Freiburg Smith-Waterman Tool\nEMBL-EBI Emboss Water Tool\nBiopython Align\nJohn Lekberg‚Äôs Sequence Alignment Blogpost"
  },
  {
    "objectID": "blog/react_crash_course_part2.html",
    "href": "blog/react_crash_course_part2.html",
    "title": "React Crash Course Part 2/3",
    "section": "",
    "text": "This is part 2/3 notes of a Youtube react crash course.\n\n\nLesson 3\n\nTo start the frontend server, we run npm run dev. This works because we have dev under script. \nThe structure for single page application is the similar for all frameworks ‚Äì the single page is index.html.\nIn index.html, we have a div element of id=‚Äúroot‚Äù, this is the main part where our application will be placed in. (See below image - left)\nIn the div, we are including the src/main.jsx file as a module. This is the application‚Äôs entrypoint.\n\nIn below image (right), we can see that we are selecting the HTML element by id, and we call render. In the below example, we are rendering &lt;/App&gt; component. This comes from App.jsx. \nWe can render anything we want, eg if we change this to H1. \n\nNotice that we are importing the stylesheet on line 3 in right image import './index.css'\nThe &lt;StrictMode&gt; is a wrapper component that will check for potential problem in your app. Eg deprecated method, unsafe lifecycle methods, legacy api usage etc.\nThe react+vite boilerplate contains 2 css (App.css and index.css).\nThe App.jsx is the main component and basically this is all the stuff that gets rendered.\nEvery react component will return JSX. JSX is a html-like syntax. \nYou can only return a single html-like element. If you want to return multiple html elements, you can just wrap them up inside a div, and return the parent div, or just use a fragment if you don‚Äôt want an actual div (essentially just wrap all of your html elements inside an empty tag &lt;&gt;&lt;/&gt;)\nWe can use javascript above the return statement. \nWe can also make reference to javascript expressions and do loops (essentially do anything using javascript - except if statement ‚Äì because it has to be a 1 line expression). Anytime we want to refer to something dynamic (from javascript), we need to use curly braces. \n\nThe above code will actually give a warning in console tool (to open the dev tool: right click anywhere ‚Äì&gt; inspect ‚Äì&gt; console tab):  This is because anytime we use list items, we need to give each item a unique id. \n\nWe can only use javascript 1 liner inside the html returned element, so what we can do is using tertary conditional if we want to use if conditional ie {condition statement ? if true : if false}\njsx is what HTML would be if it had logic.\nWe can also include inline styles in jsx file. \nYou can store your components inside ./src/components.\nA component can have a .js or .jsx extension for javascript; and .ts or .tsx for typescript. \nTo use the new component in your app.js, you need to import it. In app.js, on the top of the file, we import with import Navbar from './components/Navbar'\nTo use the imported components, we use &lt;Navbar /&gt;. \nIf we checked the components tab in dev tools, we can see the new component we‚Äôve added. (To add the components tab in the dev tools: add this chrome extension https://chromewebstore.google.com/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=ja) \nThe convention is to name Javascript components with first letter capitalized and all html elements with all lowercase letters.\nTo import image from /assets/images folder and use it in our components: \nWe can pass props to a components. These are like attributes. \nAlso another way to write is to destructure props ‚Äì&gt; {attribute1, attibuteN} \nExample of props with default values. \nHow to use component as wrapper. So in this example, we can see how we can use props not only to change the content but also the styling. \nLooping through array in javascript and outputing jsx component \n\n\nStates\n\nComponent states: relates to a single component\nGlobal states: relates to the entire app, can pass down to components\nHere is an example of component state: \nTo install additional packages for working with icons and font-awesome: npm i react-icons\nTo use the installed font, we need to import it. To import it, we write on top of the component .jsx file where we want to use it: import {} from 'react-icons/fa'. This example shows how we can import font-awesome from react-icons. We import any font-awesome components we want. After imported, these icons act like a component.\nUsing React on its own, we can not add separate pages. This is the differences between library and framework (React is a library).\nA workaround to add separate pages when using React is to use React Router. This is the official router for React, but it is a separate package, so we need to install it. To install it, use npm i react-router-dom.\nThis is how to create seperate pages using react-router-dom. \nEach of the pages you want to add to your webpage is a component, just like each of your UI is a component. It is a good idea to save them in separate folder and not together with your UI component. You may see people save them in /src/screens, /src/pages.\nAnything we imported is a component.\nHere is how to use route to create ‚Äòconnection‚Äô to separate pages. \nNote that here we set up layout using the main &lt;Route path='/' element={ &lt;MainLayout/&gt; }&gt;...&lt;/Route&gt;\n\nThis will always show on all the components nested inside the main &lt;Route&gt;.\n\nInstead of using &lt;a href=\"\"&gt;&lt;/a&gt;, use &lt;Link to=\"\"&gt;&lt;/Link&gt;. Because it loads faster. We have to import Link first from using import { Link } from 'react-router-dom'.\nIf we want the link to the pages be highlighted when user clicked on the page, we can use NavLink in place of Link. They work the same. We then need to create a function to set different class to active element and inactive element (so the active ones will be highlighted) \nAdding route to invalid url with wildcard * \nTo test out getting data from backend into your frontend, you could use json-server libray from npm (https://www.npmjs.com/package/json-server). This library lets you create mock api. You can send Get, Post, Put, Patch and Delete requests. It can use any resource you want from .json file. It runs on a separate server than your frontend react app, and it fetches data from the json file you provided. To install json-server as a dev dependencies: npm i -D json-server\nTo point the json-server to a json file we use the command json-server --watch src/file-to-point-to.json --port 8000. Here we specify the port we want the server to use. \nIn the example below, we specify the command to start the json-server under ‚Äúscripts‚Äù in package.json. So we can directly run the json-server using the command npm run server directly in the terminal in the root directory.\nOnce we have the json-server running, we can get specific output from the json-server by refering to the id. This output is the same just as if we‚Äôve build a REST API and getting through /get request. We can also do a post request to add data to the actual json file. \nThis is how we would do to directly get data from json \nWe can fetch data via api and save it in variable using useState and useEffect. \nuseEffect takes a function and a dependency array. The syntax is: useEffect( () =&gt; {}, [] ). We define the function in the () =&gt; {} portion and the dependency array as the second argument ‚Äì in the [] portion.\nWith the json-server, we can also limit the returned response from the get request by adding ?_limit=3 (eg to limit to only 3 returned output) after the http link. Eg below is the working code for useEffect()\n\nuseEffect(() =&gt; {\nconst fetchJobs = async () =&gt; {\n    try {\n    const res = await fetch('http://localhost:8000/jobs?_limit=3'); // send get request\n    const data = await res.json(); // get the data\n    setJobs(data); // this will put the data we fetched into the jobs variable\n    } catch (error) {\n    console.log('Error fetching data', error);\n    } finally {\n    // whatever we put in finally will run eitherway\n    setLoading(false);\n    }\n}\nfetchJobs(); // run the function we defined above  \n}, []);\n\nTo show spinner even page is loading, we could download the react spinner library using command npm i react-spinners\nTo only show 3 output data for the homepage, otherwise show all data \nHow to set proxy:"
  },
  {
    "objectID": "blog/get_data_geo2r.html",
    "href": "blog/get_data_geo2r.html",
    "title": "Extract data from GEO2R",
    "section": "",
    "text": "Gene Expression Omnibus (GEO) is a place where we can get publicly available datasets on gene expressions uploaded by the scientific community, for free. Here‚Äôs how we can extract data from the platform.\n\n1. Visit https://www.ncbi.nlm.nih.gov/geo/\n\n\n\nimage.png\n\n\n\n\n2. Search for keyword(s) of interest\nSearch for keyword(s) in search bar [1] and click on the search result for GEO DataSets Database [2].\n\n\n\nimage.png\n\n\n\n\n3. Filter search results\nChoose DataSets entry [3]. Select organisms you wish to investigate [4].\n\n\n\nimage.png\n\n\n\n\n4. Choose dataset(s) to investigate\nClick on the Series hyperlink on the choosen dataset we wish to proeceed with.\n\n\n\nimage.png\n\n\n\n\n5. Click on Analyze with GEO2R\n\n\n\nimage.png\n\n\n\n\n6. Split samples into Control & Treatment group\nTo create a new group, click Define groups and define the name of the group. Once group has been defined, select row(s) from the table to add to the group. Hold down shift to select multiple rows at once.\nOnce rows has been added to groups, you will see the group name under Group column instead of -.\n\n\n\nimage.png\n\n\n\n\n\nimage.png\n\n\n\n\n\nimage.png\n\n\nAfter splitting into 2 (or more groups, if needed), your table should be similar to this:\n\n\n\nimage.png\n\n\n\n\n7. Analyze sample data using GEO2R tool\nClick on Analyze to check out the samples data. You can download the full table in tsv file by clicking the Download full table below.\n\n\n\nimage.png\n\n\n\n\n\nimage-2.png\n\n\nReferences & Credits: 1. Andrew Gao‚Äôs Udemy Course: Gene Expression 2. NCBI Tutorials 3. NCBI GEO Overview 4. Saint Louis University: GEO Tutorial"
  },
  {
    "objectID": "blog/visualizing_arrays.html",
    "href": "blog/visualizing_arrays.html",
    "title": "Visualizing Arrays using Excel",
    "section": "",
    "text": "Visualizing simple operations across arrays\n\n\nimport numpy as np\nimport torch\nfrom torch import tensor\n\nIn deep learning world, we are always working with arrays and tensors. They are data structure in which we store data for our model to train on. Both are multi-dimensional data structure and have similar functionality, but tensors had more restrictions than arrays.\nTensor must:\n\nuse a single basic numerical type for all components in the array.\ncan not be jagged. It is always regularly shaped multi-dimensional rectangular structure.\n\nI always had trouble trying to understand what exactly happen when we perform operations on any data structure that has higher dimension than a list (dimension of 1).\nSo, let‚Äôs use Excel to visualize some basic operations on arrays (or tensors)! Say we have 2 tensors, a and b. Both of dimension of 3.\n\n\n\nimage-2.png\n\n\n\na = tensor([[[1,2,3,4],\n            [40,50,60,70],\n            [7,8,9,10]], \n           \n           [[11,12,13,14],\n           [140,150,160,170],\n           [17,18,19,20]]])\n\n\nb = tensor([[[1,1,1,1],\n            [2,2,2,2],\n            [3,3,3,3]],\n           \n           [[1,1,1,1],\n           [2,2,2,2],\n           [3,3,3,3]]])\n\nprint('a shape:\\t', a.shape)\nprint('b shape:\\t', b.shape)\n\na shape:     torch.Size([2, 3, 4])\nb shape:     torch.Size([2, 3, 4])\n\n\n\nElement wise operation\n\n\n\nimage-2.png\n\n\nIf we subtract tensor a - tensor b, we are doing elementwise operation because both tensors a and b are of the same shape.\n\na_b = a - b\nprint('a_b shape:\\t', a_b.shape)\na_b\n\na_b shape:   torch.Size([2, 3, 4])\n\n\ntensor([[[  0,   1,   2,   3],\n         [ 38,  48,  58,  68],\n         [  4,   5,   6,   7]],\n\n        [[ 10,  11,  12,  13],\n         [138, 148, 158, 168],\n         [ 14,  15,  16,  17]]])\n\n\n\n\nSum across tensor\n\n\n\nimage.png\n\n\nIf we sum across the whole tensor, we will get a scalar value (dimension 0). Scalar value is another name for a number.\n\nprint(a_b.sum().shape)\na_b.sum()\n\ntorch.Size([])\n\n\ntensor(960)\n\n\n\n\nSum across axis\nNow, let‚Äôs do sum operation across axis. Axis could be sample, row or column. Notice that our tensor a_b had shape of (2,3,4). This means it is made up of 2 samples (E23:H25 cells is a sample, E27:H29 cells is the other sample), each sample has 3 rows and 4 columns. So from shape information, we know (total samples, total rows in each sample, total columns in each sample).\nIn code, the shape information is often represented as tuple data structure. Which means we can also do negative indexing, ie: - shape at index -2 == column information - shape at index -1 == row information - shape at index 0 == sample information\nSum across any axis would collapse the specified axis. What do I mean by this?\nOriginally, our a_b tensor is of shape (2, 3, 4). If we add all rows, keeping everything else the same. Our resulting shape would be (2, 3, 4) ‚Äì&gt; (2, 1, 4)\n\n\n\nimage.png\n\n\n\nprint(a_b.sum(-2, keepdim=True).shape)\na_b.sum(-2, keepdim=True)\n\ntorch.Size([2, 1, 4])\n\n\ntensor([[[ 42,  54,  66,  78]],\n\n        [[162, 174, 186, 198]]])\n\n\nYup, this below is the same. The only difference here is that we use index here. Above, we use negative indexing style. The same thing, just different way of writing, don‚Äôt let it confuse you.\n\n\nprint(a_b.sum(1, keepdim=True).shape)\na_b.sum(1, keepdim=True)\n\ntorch.Size([2, 1, 4])\n\n\ntensor([[[ 42,  54,  66,  78]],\n\n        [[162, 174, 186, 198]]])\n\n\n\n\n\nimage.png\n\n\nSimilarly, if we add all columns, keeping everything the same. Then our resulting shape would be (2, 3, 4) ‚Äì&gt; (2, 3, 1)\n\nprint(a_b.sum(-1, keepdim=True).shape)\na_b.sum(-1, keepdim=True)\n\ntorch.Size([2, 3, 1])\n\n\ntensor([[[  6],\n         [212],\n         [ 22]],\n\n        [[ 46],\n         [612],\n         [ 62]]])\n\n\n\nprint(a_b.sum(2, keepdim=True).shape)\na_b.sum(2, keepdim=True)\n\ntorch.Size([2, 3, 1])\n\n\ntensor([[[  6],\n         [212],\n         [ 22]],\n\n        [[ 46],\n         [612],\n         [ 62]]])\n\n\n\n\n\nimage.png\n\n\nNow, if we add all samples, keeping everything else the same. Our result would be from shape (2, 3, 4) ‚Äì&gt; (1, 3, 4).\n\nprint(a_b.sum(0, keepdim=True).shape)\na_b.sum(0, keepdim=True)\n\ntorch.Size([1, 3, 4])\n\n\ntensor([[[ 10,  12,  14,  16],\n         [176, 196, 216, 236],\n         [ 18,  20,  22,  24]]])\n\n\n\nprint(a_b.sum(-3, keepdim=True).shape)\na_b.sum(-3, keepdim=True)\n\ntorch.Size([1, 3, 4])\n\n\ntensor([[[ 10,  12,  14,  16],\n         [176, 196, 216, 236],\n         [ 18,  20,  22,  24]]])\n\n\n\n\nSum across multiple axis\n\n\n\nimage.png\n\n\nWe can also do sum across multiple axis. Remember that our original tensor is of shape (2, 3, 4), if we do sum operation across both rows and columns, then we would be collapsing both of these axis, keeping everything else the same. So the resulting tensor would be from shape (2, 3, 4) ‚Äì&gt; (2, 1, 1).\n\nprint(a_b.sum((-1,-2), keepdim=True).shape)\na_b.sum((-1,-2), keepdim=True)\n\ntorch.Size([2, 1, 1])\n\n\ntensor([[[240]],\n\n        [[720]]])\n\n\nAlso notice that the order in which we specify the axes does not matter. .sum((-1, -2)) is the same as .sum((-2, -1)).\n\nprint(a_b.sum((-2,-1), keepdim=True).shape)\na_b.sum((-2,-1), keepdim=True)\n\ntorch.Size([2, 1, 1])\n\n\ntensor([[[240]],\n\n        [[720]]])\n\n\n\n\n\nimage.png\n\n\nNow we sum all samples and rows, keeping everything else the same. The resulting tensor would be from (2, 3, 4) ‚Äì&gt; (1, 1, 4).\n\nprint(a_b.sum((0,1), keepdim=True).shape)\na_b.sum((0,1), keepdim=True)\n\ntorch.Size([1, 1, 4])\n\n\ntensor([[[204, 228, 252, 276]]])\n\n\n\n\n\nimage.png\n\n\nLastly, if we sum all samples and columns, then the resulting tensor would be from (2, 3, 4) ‚Äì&gt; (1, 3, 1).\nNotice that for resulting value 52, our excel formula is E23:H23 + E27:H27 ‚âà we add everything from first row in sample 1, plus everything from first row in sample 2.\n\nprint(a_b.sum((0,-1), keepdim=True).shape)\na_b.sum((0,-1), keepdim=True)\n\ntorch.Size([1, 3, 1])\n\n\ntensor([[[ 52],\n         [824],\n         [ 84]]])\n\n\nHopefully, now it is easy to notice that any axis we choose to perform operations on would be collapsed to 1. Which means, when we collapsed all axes, it is equivalent to sum across everything in the tensor. ie in code, this is:\n\nprint(a_b.sum((0,1,2)).shape)\na_b.sum((0,1,2))\n\ntorch.Size([])\n\n\ntensor(960)\n\n\nwhich is the same as:\n\nprint(a_b.sum().shape)\na_b.sum()\n\ntorch.Size([])\n\n\ntensor(960)\n\n\nAll above operations can be also performed using numpy arrays. For example, the equivalent summing across samples and rows in numpy is:\n\nprint(np.array(a_b).sum((0,-1), keepdims=True).shape)\nnp.array(a_b).sum((0,-1), keepdims=True)\n\n(1, 3, 1)\n\n\narray([[[ 52],\n        [824],\n        [ 84]]])\n\n\nVisualizing these tensors and formulas on excel makes it easier to for me to see what happen in the background. Hopefully, it is helpful to you too."
  },
  {
    "objectID": "blog/bwt_in_python.html",
    "href": "blog/bwt_in_python.html",
    "title": "Burrows-Wheeler Transform in Python",
    "section": "",
    "text": "Burrows-Wheeler Transform is a method used for pattern matching problem. We can use it to find all instances of substrings in the database that matches our query sequence.\nI recently learnt about Burrows-Wheeler Transform from the Advanced Data Structure playlist by Niema Moshiri. In this notebook, I tried to implement it using python.\nfrom collections import Counter\nimport pandas as pd\ndb = 'BANANA$'"
  },
  {
    "objectID": "blog/bwt_in_python.html#step-1-list-out-bwt-as-last-column-and-sorted-list-of-the-original-database-as-first-column",
    "href": "blog/bwt_in_python.html#step-1-list-out-bwt-as-last-column-and-sorted-list-of-the-original-database-as-first-column",
    "title": "Burrows-Wheeler Transform in Python",
    "section": "Step 1: List out BWT as last column and sorted list of the original database as first column",
    "text": "Step 1: List out BWT as last column and sorted list of the original database as first column\n\ndf = pd.DataFrame({'first': sorted(db), 'last': BWT})\ndf\n\n\n\n\n\n\n\n\nfirst\nlast\n\n\n\n\n0\n$\nA\n\n\n1\nA\nN\n\n\n2\nA\nN\n\n\n3\nA\nB\n\n\n4\nB\n$\n\n\n5\nN\nA\n\n\n6\nN\nA"
  },
  {
    "objectID": "blog/bwt_in_python.html#step-2-add-the-number-of-times-weve-seen-the-character-at-that-point-as-subscript",
    "href": "blog/bwt_in_python.html#step-2-add-the-number-of-times-weve-seen-the-character-at-that-point-as-subscript",
    "title": "Burrows-Wheeler Transform in Python",
    "section": "Step 2: Add the number of times we‚Äôve seen the character at that point as subscript",
    "text": "Step 2: Add the number of times we‚Äôve seen the character at that point as subscript\n\n### adding subscript for first column (sorted original database)\n\ndbcounter = Counter(db)\n\nsorted_db_subs = []\nfor c in sorted(db, reverse=True):\n    sorted_db_subs.append(c + str(dbcounter[c]))\n    dbcounter[c] = dbcounter[c] - 1\n\nsorted_db_subs = sorted(sorted_db_subs)\nsorted_db_subs\n\n['$1', 'A1', 'A2', 'A3', 'B1', 'N1', 'N2']\n\n\n\n### adding subscript for last column (BWT)\n\ndbcounter = Counter(BWT)\nprint(dbcounter)\n\nbwt_subs = []\nfor c in BWT[::-1]:\n    bwt_subs.append(c + str(dbcounter[c]))\n    dbcounter[c] = dbcounter[c] - 1\n\nbwt_subs = bwt_subs[::-1]\n\nCounter({'A': 3, 'N': 2, 'B': 1, '$': 1})\n\n\n\ndf['first_sub'] = sorted_db_subs\ndf['last_sub'] = bwt_subs\n\n\ndf\n\n\n\n\n\n\n\n\nfirst\nlast\nfirst_sub\nlast_sub\n\n\n\n\n0\n$\nA\n$1\nA1\n\n\n1\nA\nN\nA1\nN1\n\n\n2\nA\nN\nA2\nN2\n\n\n3\nA\nB\nA3\nB1\n\n\n4\nB\n$\nB1\n$1\n\n\n5\nN\nA\nN1\nA2\n\n\n6\nN\nA\nN2\nA3"
  },
  {
    "objectID": "blog/bwt_in_python.html#step-3-add-last-to-first-mapping",
    "href": "blog/bwt_in_python.html#step-3-add-last-to-first-mapping",
    "title": "Burrows-Wheeler Transform in Python",
    "section": "Step 3: Add last-to-first mapping",
    "text": "Step 3: Add last-to-first mapping\n\nMAPPING = {k:v for k,v in zip(df['first_sub'].values, range(len(df)))}\nMAPPING\n\n{'$1': 0, 'A1': 1, 'A2': 2, 'A3': 3, 'B1': 4, 'N1': 5, 'N2': 6}\n\n\n\ndf['L2F'] = df.apply(lambda row: MAPPING[row['last_sub']],axis=1)\ndf\n\n\n\n\n\n\n\n\nfirst\nlast\nfirst_sub\nlast_sub\nL2F\n\n\n\n\n0\n$\nA\n$1\nA1\n1\n\n\n1\nA\nN\nA1\nN1\n5\n\n\n2\nA\nN\nA2\nN2\n6\n\n\n3\nA\nB\nA3\nB1\n4\n\n\n4\nB\n$\nB1\n$1\n0\n\n\n5\nN\nA\nN1\nA2\n2\n\n\n6\nN\nA\nN2\nA3\n3\n\n\n\n\n\n\n\nWe can reconstruct our original database string from this preprocessed data. Here‚Äôs how:\nWe can start with the null termination character we added, we know it is in the first row, first_sub column, so we retrieve that first.\nRemember that as part of our preprocessing steps we do rotations of the original database string, and from that rotations we save the first column in first_sub and the last column in last_sub? So this tells us that first_sub and last_sub are connected: last_sub character comes before first_sub character.\n\n\n\nimage.png\n\n\nTo illustrate: 1. Start with null termination $1. 2. Find null termination $1 in last_sub (row 4). The next character follows it is the corresponding character in first_sub column (red arrow). Now the reconstructed string is $1 B1. 3. Find the last added character in the last_sub. Add its corresponding first_sub to the reconstructed string (blue arrow). Now the reconstructed string is $1 B1 A3. 4. Continue building the reconstructed string until we reached the character last_sub of first row. Why first row? because we started the reconstructed string with $1 ‚Äì which is also the first_sub character in our preprocessed data‚Äôs first row.\n\nreconstruct = [df.loc[0,'first_sub']]\n\nwhile reconstruct[-1] != df.loc[0,'last_sub']:\n    last_char = reconstruct[-1]\n    next_index = df[df['last_sub']==last_char].index.values[0]\n    next_char = df.loc[df.index==next_index, 'first_sub'].values[0]\n    reconstruct.append(next_char)\n\nreconstructed_str_sub = ' '.join(reconstruct)\nreconstructed_str = ''.join([c[0] for c in reconstruct])\n\nprint('Reconstructed database string (with subscript):',reconstructed_str_sub)\nprint('Reconstructed database string:', reconstructed_str)\nprint('Original database string:', db)\n\nReconstructed database string (with subscript): $1 B1 A3 N2 A2 N1 A1\nReconstructed database string: $BANANA\nOriginal database string: BANANA$\n\n\nWe then move the null termination character to the end of the string and we can get back the original database."
  },
  {
    "objectID": "blog/diff_pam_blosum.html",
    "href": "blog/diff_pam_blosum.html",
    "title": "Differences between: PAM vs BLOSUM",
    "section": "",
    "text": "PAM and BLOSUM are both substitution matrix for amino acid. This is a high level overview of their differences.\n\nYou can download the image from here.\n\nfrom IPython.display import display, HTML\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\ndisplay(HTML('&lt;iframe frameborder=\"0\" style=\"width:100%;height:800px;\" src=\"https://viewer.diagrams.net/?tags=%7B%7D&lightbox=1&highlight=0000ff&edit=_blank&layers=1&nav=1&title=blosumVSpam.drawio#Uhttps%3A%2F%2Fdrive.google.com%2Fuc%3Fid%3D1fjtAgobn9ve0DzsDLo7zAyWCGsUtPXRA%26export%3Ddownload\"&gt;&lt;/iframe&gt;'));\n\n\n\n\n\nReference & credit:\n\nDr.¬†Rob Edwards: BLAST playlist\nWikipedia: Tyrosine\nWikipedia: Phenylalanin\nHuman Genome Variation Society: Codon & amino acids"
  },
  {
    "objectID": "blog/frontend_crash_course_part3.html",
    "href": "blog/frontend_crash_course_part3.html",
    "title": "Front-end Web Dev Crash Course Part 3/4",
    "section": "",
    "text": "This is part 3/4 notes of a Youtube Front-end web development crash course."
  },
  {
    "objectID": "blog/frontend_crash_course_part3.html#combinators",
    "href": "blog/frontend_crash_course_part3.html#combinators",
    "title": "Front-end Web Dev Crash Course Part 3/4",
    "section": "Combinators",
    "text": "Combinators\n\nDescendents selector: Target every descendents of pre-selector.\n\nSyntax: pre-selector descendent-selector (ie I want to target any actual selector that exist as a descendent of pre-selector)\nthe parent‚Äôs selector (here as .main-container) is called pre-selector\nthe actual element we want to style selector (here as li) is called the actual selector \n\nChildren selector: Target only the direct children of a pre-selector.\n\nSyntax: pre-selector &gt; children-selector \n\nAdjacent Sibling selector: Select only the first sibling that directly follow a specific element.\n\nSyntax: pre-selector + sibling-selector\nCons: if we change the structure of our HTML, this rule will break. Eg if we wraped the &lt;ul&gt; in a &lt;div&gt;, then it will break because &lt;p&gt; will no longer be the direct sibling of &lt;ul&gt;. \nA better alternative is to give the elements a class, then directly style the class like below. Now the CSS rule will not break even if we change the structure. \n\nDirect Sibling selector: Select all direct siblings that directly follow a specific element.\n\nSyntax: pre-selector ~ siblings-selector \n\nSelect specific tag & class: Select only elements that are of specific tag that belongs to specific class.\n\nSyntax: tag-selector[class=\"class-selector\"]\nUse this when we have many tags belonging to the same class, but we only want to select a specific tag. Notice the &lt;div&gt; also belong to the same class, but is not selected. \n\nWhen we want to have unique styles for different class but also have some styles that are shared across. Eg let‚Äôs say we want the 2 boxes to have the same width, height but everything else unique to each class:\n\nMethod 1: Styling for each class\n\nNotice we have repetitive width and height specified for each of the class style. \n\nMethod 2: Shared styling\n\nNotice we‚Äôve removed repetitive width and height and move them to shared styling.\nSyntax: selector1 , selector2 (ie I want to target selector1 AND selector2) Here selector can be of tag, class, id or whatever. \n\nMethod 3: Give multiple classes to a single element\n\nIn HTML, give the element another class using syntax &lt;tag class=\"class-1 class-2 class-n\"&gt;\nThen we could directly refer to the specific class we want to style in CSS \n\n\nPseudo-selector: Different styling based on the element current state\n\nAdd styling for mouse hovering on button element."
  },
  {
    "objectID": "blog/frontend_crash_course_part3.html#two-factors-for-determining-css-precedence",
    "href": "blog/frontend_crash_course_part3.html#two-factors-for-determining-css-precedence",
    "title": "Front-end Web Dev Crash Course Part 3/4",
    "section": "Two factors for determining CSS precedence",
    "text": "Two factors for determining CSS precedence\n\nLocation of the CSS rule in the file\n\nIf there are multiple style applied to the same element, the bottom most style will be applied. Unless there are selectors that is higher up, but has more specificity.\nCSS is read from top to bottom. \n\nSpecificity of the CSS rule\n\nid (most important) &gt; class &gt; tag (least important) take precedence when applying CSS rule.\n\n \n\nMore selector = higher precedence (therefore combinators (higher precedence) &gt; id &gt; class &gt; tag)\n\nHow to know? count number of ID, class, tags \n\n\n\n\nSome gotchas:\n\nHTML inline styles take precedence even if we select elements using id \nHowever, we can override the inline style by adding !important. This will apply even if we use tag selector (which is the least importance compared to class and id)\n\nIn reality, we almost never want to use inline styles and !important selectors."
  },
  {
    "objectID": "blog/frontend_crash_course_part3.html#reference",
    "href": "blog/frontend_crash_course_part3.html#reference",
    "title": "Front-end Web Dev Crash Course Part 3/4",
    "section": "Reference",
    "text": "Reference\n\nFrontEnd Mentor\nMDN/Reference Index: List of all CSS properties that we can use for styling\nMDN/Pseudo-class: Allow us to style an element differently based on different states"
  },
  {
    "objectID": "blog/frontend_crash_course_part3.html#css-properties",
    "href": "blog/frontend_crash_course_part3.html#css-properties",
    "title": "Front-end Web Dev Crash Course Part 3/4",
    "section": "CSS properties",
    "text": "CSS properties\n\ndisplay:\n\nBy default, most HTML element will have a display property of ‚Äòblock‚Äô. display: block;\n\nblock will make the HTML element occupy 100% of its container space (width), on a new line. \nIf we did not specify the height, it will take up the total height of the content within it.\nblock element respect its width and height properties ‚Äì ie if we explicitly set width properties, it will no longer occupy 100% of the page width. The same applies to height. \n\nBut some HTML element have different default, eg &lt;span&gt; element has default display: inline;\n\ninline will make the HTML element share the same line as the element before it. They don‚Äôt break to a new line by default.\nThey don‚Äôt occupy the whole of the space, but only occupy the size of the content within them. \ninline element does not respect width, height even when it is explicitly specified. \n\ninline-block is combination of both inline and block.\n\nHas all properties of inline but now it respects the width and height properties.\n\n\nbox-sizing:\n\nDefault value is content-box.\n\nIf the property is content-box, the way to calculate how much total size a particular element is taking up is as shown in the image below. \nIf we add padding to box-sizing: content-box, it will add space to the element. This might make the element break out of its parent element if it is nested.\n\nIf we change this property to border-box, it will change how (width, height, padding, border and margin) properties relates to each other.\n\nWe can specify the total height and width we want the entire element to occupy without having to calculate each of the individual component (width, height, padding, border) takes up. \nIf we add padding to box-sizing: content-box, it will not add space to the element, but will adjust the content to (make it smaller), so that the total height + padding = specified height and total width + padding = specified width.\n\n\nCSS reset: To reset all element in the whole document. ``` /* here we‚Äôre changing the box-sizing on the root element\n\nto border-box */ html { box-sizing: border-box; }\n/* () asterics here is a wildcard (targetting all elements in this entire document) and set box-sizing to inherit whatever the property set for the root element. / , :before, *:after { box-sizing: inherit; } ```\n\n\n\n\nimage.png"
  },
  {
    "objectID": "blog/frontend_crash_course_part3.html#most-common-css-properties",
    "href": "blog/frontend_crash_course_part3.html#most-common-css-properties",
    "title": "Front-end Web Dev Crash Course Part 3/4",
    "section": "Most common CSS properties",
    "text": "Most common CSS properties\n\nposition property: one of [static (default), absolute, relative, fixed, sticky (newer - might not be supported in some browser)]\n\nposition: fixed: Fixed element visibly takes up ‚Äúspace‚Äù but not from the prespective of other elements on the page.\n\nTakes the element out of the flow of the document and fixed its position on the page relative to the viewport (edges of the browser‚Äôs window).\nNeed to explicitly specify the width and height of the element. \n\nposition: relative: When we set an element to be absolute or relative, it enables a new property called z-index (make the page 3D instead of 2D - now element can overlap one another)  \n\nTo make the navbar sit on top of the element with position: relative, we have to specify z-index: 0; for the &lt;nav&gt; styling.\nWe can move the element around relative to itself when we set position: relative. ie if we set top: 20px it will move the element down from its current position by 20px. This is also applicable to bottom, left, right properties.\nMight be useful when we have stuborn HTML element that we need to move around but can‚Äôt quite do it with normal CSS properties.\n\nposition: absolute: Pull the element out of flow of the document but we‚Äôre positioning them relative to other element (which has either relative or absolute position) that is directly on top of it (its parent). If there is no other element on top of it that has either relative or absolution positioning, it will make this element relatively positioned according to the root &lt;html&gt; element.\n\ntop, bottom, left, right offsets of this element will be based on the position of its next highest element that has relative or absolute positioning. (and not offsets based on the viewport)"
  },
  {
    "objectID": "blog/frontend_crash_course_part3.html#css-measurement-units",
    "href": "blog/frontend_crash_course_part3.html#css-measurement-units",
    "title": "Front-end Web Dev Crash Course Part 3/4",
    "section": "CSS Measurement Units",
    "text": "CSS Measurement Units\n\npixels\npercentages\n\nThe prefered way to set width, height as we move away from desktop to mobile (responsive design).\nSo that as we resize the window, the element will not get cut off from the viewport, and always stays x% relative the webpage. \n\n\n\nFont measurement units\n\nHow to define font sizes:\n\nIt gets difficult to define font sizes for each text element one at a time, so we generally target the root element &lt;html&gt; and have everything else be relative to the root font size.\nDefault font-size is generally 16px.\nrem and em units allow us to define font-size (root or parent) one time and have everything else be relative to that.\n\nEg if we have a webapp and user starts complaining that the font-size is too small, then we can just change the font-size one time at the root level, then everything else will be relative to that font-size.\n\n\nrem: relative to the root &lt;html&gt; element\n\n1rem = 100% of the size of the text in the root element\n1.2rem = 120% of the size of the text in the root element (eg if the root font size is 16px then 120% * 16px = 19.2px)\n\nem: relative to its parent element\n\nsame calculation as rem unit."
  },
  {
    "objectID": "blog/frontend_crash_course_part3.html#custom-fonts",
    "href": "blog/frontend_crash_course_part3.html#custom-fonts",
    "title": "Front-end Web Dev Crash Course Part 3/4",
    "section": "Custom fonts",
    "text": "Custom fonts\n\nTo add custom fonts (in local environment):\n\nGo to Google font and pick a font we like\nCopy paste the provided &lt;link&gt; snippet into &lt;head&gt; section of our html file.\nCopy paste the font-family property into our css file.\nLink the CSS file to HTML file.  \n\nTo add custom fonts (in codepen environment):\n\nGo to Google font and pick a font we like\nCopy the provided &lt;link&gt; snippet and paste it to Settings -&gt; ‚ÄúStuffs for\n\n‚Äù\nCopy the provided font-family property and paste it to CSS section. \n\n4 font properties that are highly relevant to know:\n\nfont-family: define what all text in your webpage will inherit. Often we define it once for &lt;html&gt; or &lt;body&gt; tag and this is going to apply to every font in the webpage.\n\nWe can give 2 values for font-family (it‚Äôs not a must to give it 2 values). If we give it 2 values eg font-family: Georgia, serif, then the first argument will be the default font-family of our webpage, and the second argument will be the fallback font.\nIf the font-family name is 2 words, we need to put them in brackets eg ‚ÄúGill Sans‚Äù.\n\nfont-weight: specify the thickness of the font.\n\nWe can only give the width we imported. Eg in the example below, we can set anything in between 400-700. \n\nline-height: spacing in between lines of text.\ncolor: Specify text color. Check out documentation for a list of available colors.\n\nCan be defined as hex, rgb, rgba\nrgba = the first 3 numbers are the values for red, green and blue. The last value define the opacity. 100% opacity = 1. In the example below, we set it to 30% opacity."
  },
  {
    "objectID": "blog/frontend_crash_course_part3.html#set-background-image",
    "href": "blog/frontend_crash_course_part3.html#set-background-image",
    "title": "Front-end Web Dev Crash Course Part 3/4",
    "section": "Set background image",
    "text": "Set background image\n\n\n\nimage.png"
  },
  {
    "objectID": "blog/frontend_crash_course_part3.html#shorthand",
    "href": "blog/frontend_crash_course_part3.html#shorthand",
    "title": "Front-end Web Dev Crash Course Part 3/4",
    "section": "Shorthand",
    "text": "Shorthand\n\n\n\nimage.png"
  },
  {
    "objectID": "blog/frontend_crash_course_part3.html#step-method-to-write-css-and-html",
    "href": "blog/frontend_crash_course_part3.html#step-method-to-write-css-and-html",
    "title": "Front-end Web Dev Crash Course Part 3/4",
    "section": "4-Step method to write CSS and HTML",
    "text": "4-Step method to write CSS and HTML\n 1. Figure out what you want to put on the page ‚Äì design / wireframing 2. How do you want to arrange elements on the page with HTML ‚Äì the HTML document 3. How to use CSS to achieve the layout ‚Äì the layout 4. How to style the elements ‚Äì styling: ie color, margin, padding, etc"
  },
  {
    "objectID": "blog/frontend_crash_course_part3.html#user-story",
    "href": "blog/frontend_crash_course_part3.html#user-story",
    "title": "Front-end Web Dev Crash Course Part 3/4",
    "section": "User story",
    "text": "User story\n\nSomething that we will write down in the requirements gathering phase of building webpage.\nShould list out all the things a user should be able to do if this is implemented correctly."
  },
  {
    "objectID": "blog/frontend_crash_course_part3.html#reference-1",
    "href": "blog/frontend_crash_course_part3.html#reference-1",
    "title": "Front-end Web Dev Crash Course Part 3/4",
    "section": "Reference",
    "text": "Reference\n\nMDN/Font Family: List of available font family\nGoogle Fonts: Free custom fonts we can use\nMDN/Color: List of available colors\nAbode Color: Where we can explore color themes and complementary colors.\nMDN/Background Position: background-position documentation"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Sarah Hannes",
    "section": "",
    "text": "LinkedIn\n  \n  \n    \n     Github\n  \n  \n    \n     Download CV\n  \n\n      \n\n\nPython Pandas Tensorflow Keras Scikit-Learn\nLightGBM SQL MongoDB \n\n\n\nBottomless | Aug 2022 - Present\nJunior Data Scientist\nDHL | May 2021 ‚Äì Oct 2021\nData Scientist Intern\nAccenture | Jul 2019 ‚Äì Oct 2020\nQuality Auditor\n\n\n\nUniversity of Technology, Malaysia (UTM) | March 2022\nMaster of Science (Data Science)\nUniversity of Science, Malaysia (USM) | July 2016\nBachelor of Applied Biology, Hons (Biotechnology)"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "Sarah Hannes",
    "section": "",
    "text": "Bottomless | Aug 2022 - Present\nJunior Data Scientist\nDHL | May 2021 ‚Äì Oct 2021\nData Scientist Intern\nAccenture | Jul 2019 ‚Äì Oct 2020\nQuality Auditor"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Sarah Hannes",
    "section": "",
    "text": "University of Technology, Malaysia (UTM) | March 2022\nMaster of Science (Data Science)\nUniversity of Science, Malaysia (USM) | July 2016\nBachelor of Applied Biology, Hons (Biotechnology)"
  },
  {
    "objectID": "til/130524_conda_ValueError.html",
    "href": "til/130524_conda_ValueError.html",
    "title": "Conda ValueError when trying to open jupyter notebook",
    "section": "",
    "text": "Getting ValueError when forgetting to add conda when trying to activate conda environment\n\nTraceback (most recent call last):\n  File \"/opt/homebrew/Caskroom/miniforge/base/bin/jupyter-notebook\", line 10, in &lt;module&gt;\n    sys.exit(main())\n  File \"/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/site-packages/jupyter_core/application.py\", line 283, in launch_instance\n    super().launch_instance(argv=argv, **kwargs)\n  File \"/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/site-packages/traitlets/config/application.py\", line 1074, in launch_instance\n    app.initialize(argv)\n  File \"/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/site-packages/traitlets/config/application.py\", line 118, in inner\n    return method(app, *args, **kwargs)\n  File \"/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/site-packages/notebook/notebookapp.py\", line 2171, in initialize\n    self.init_webapp()\n  File \"/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/site-packages/notebook/notebookapp.py\", line 1779, in init_webapp\n    self.web_app = NotebookWebApplication(\n  File \"/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/site-packages/notebook/notebookapp.py\", line 178, in __init__\n    settings = self.init_settings(\n  File \"/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/site-packages/notebook/notebookapp.py\", line 316, in init_settings\n    nbextensions_path=jupyter_app.nbextensions_path,\n  File \"/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/site-packages/notebook/notebookapp.py\", line 1349, in nbextensions_path\n    from IPython.paths import get_ipython_dir\n  File \"/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/site-packages/IPython/__init__.py\", line 55, in &lt;module&gt;\n    from .terminal.embed import embed\n  File \"/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/site-packages/IPython/terminal/embed.py\", line 16, in &lt;module&gt;\n    from IPython.terminal.interactiveshell import TerminalInteractiveShell\n  File \"/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/site-packages/IPython/terminal/interactiveshell.py\", line 31, in &lt;module&gt;\n    from prompt_toolkit.auto_suggest import AutoSuggestFromHistory\nValueError: source code string cannot contain null bytes\n\nSteps to reproduce error\n\nOpen terminal\nActivate your environment, here myenv:\n\n(base) activate myenv\n\nOpen jupyter notebook\n\njupyter notebook\n\n\nHow to fix it\nThe error is because I did not specify conda when trying to activate environment. It should be:\n(base) conda activate myenv\n\n\nWhy we get this error\nWhen we do activate myenv, we are still in our base environment and not myenv. Perhaps some of the libraries required to open jupyter notebook is outdated in our base environment."
  },
  {
    "objectID": "til/140524_conda_ImportError.html",
    "href": "til/140524_conda_ImportError.html",
    "title": "Conda ImportError when trying to run python file",
    "section": "",
    "text": "Update typing_extensions when getting ImportError\n\nTraceback (most recent call last):\n...\nfrom typing_extensions import TypeAlias # Python 3.10+ ImportError: cannot import name 'TypeAlias' from 'typing_extensions' (/opt/homebrew/Caskroom/miniforge/base/envs/my_env/lib/python3.10/site-packages/typing_extensions.py)\n\nSteps to reproduce error\n\nOpen terminal\nCreate requirements.txt in current working directory\n\n# requirements.txt\ntyping-extensions ==3.7.4\n\nCreate new environment with python=3.10, install pip, install required libraries from requirements.txt using pip. Here, our environment is called my_env.\n\nconda create -n myenv python=3.10\nconda install pip\npip install -r requirements.txt\n\nCreate a dummy python file called run.py in current working directory\n\n# run.py\nprint('hello world!')\n\nRun run.py from terminal\n\npython run.py\n\n\nHow to fix it\nUpgrade typing_extensions by:\npip install typing_extensions==4.7.1 --upgrade"
  },
  {
    "objectID": "til/190624_howtodocker.html",
    "href": "til/190624_howtodocker.html",
    "title": "How to build üê≥ Docker Image & run Container",
    "section": "",
    "text": "Step by step guide on how to build docker image on VSCode and run docker container on Docker Desktop App\n\nIt is seldom that I needed to use docker to validate pre-production code, but when I do, I find myself always having to retrace my steps trying to learn how to use docker again. So here is step by step guide to remind myself:\n\n1. Build docker image\n\nOpen VSCode window, choose ‚ÄúOpen Folder‚Äù.\nChoose the directory where we store the pre-production code we want to test. Eg ‚Äúmyfolder‚Äù here.\n\n\n.\n‚îî‚îÄ‚îÄ myfolder/\n    ‚îú‚îÄ‚îÄ newmodel_prediction.py\n    ‚îú‚îÄ‚îÄ requirements.txt\n    ‚îú‚îÄ‚îÄ Dockerfile\n    ‚îú‚îÄ‚îÄ .gitignore\n    ‚îî‚îÄ‚îÄ .dockerignore\n\n\nIf not already exist, add .dockerignore. If the file we want to ignore is not in ‚Äò./myfolder‚Äô directory, we need to include full filepath.\n\n\n# .dockerignore\nDockerfile\nbin\ninclude\nlib\nvenv\n.env\n\n\nIf not already exist, create .gitignore. Fill in any filenames that you want to exclude. If the file we want to ignore is not in ‚Äò./myfolder‚Äô directory, we need to include full filepath.\n\n\n# .gitignore\n.env\nbin\nlib\ninclude\nshare\n.ipynb_checkpoints\n\n\nIf not already exist, create requirements.txt. We can automatically create one using terminal. In terminal:\n\n\n# make sure we have pipreqs installed, if not install using:\n!pip install pipreqs\n\n# create requirements.txt in the parent directory\n!pipreqs .\n\n\nCreate Dockerfile. Currently, below is the minimal working dockerfile we can use to test any pre-production code. The last line CMD [\"python3.8\", \"./newmodel_prediction.py\"] means as soon as the container is running, run python 3.8 ./newmodel_prediction.py.\n\n\n# Dockerfile\n\n# enter what specific python image we want to work with\nFROM python:3.8.16\n\nRUN apt-get install libgomp1\n\nWORKDIR /usr/local/bin\nADD . ./\n\nRUN python -m pip install -r requirements.txt\n\n# what command we want to run as soon as the container is running\nCMD [\"python3.8\", \"./newmodel_prediction.py\"]\n\n\nOpen up docker desktop apps.\nBuild docker image. The easiest way to create an image in VSCode:\n\nOpen up Dockerfile\nIn Dockerfile, right-click and select ‚ÄúBuild Image‚Ä¶‚Äù \nLook notice the ‚Äúmyfolder:1‚Äù in the command pallete. ‚Äúmyfolder‚Äù is there because it is the name of our current directory, this will become the default image name. ‚Äú1‚Äù here is the default image tag. We can change both the image name and the tag if we wish, or just press enter to use the default. \nIf there is no error, your terminal should look similar like so. \nObserve that we have newly created image in our docker desktop app. \n\n\n\n\n2. Create docker container & run\n\nClick on the newly created image. \nSet container name (optional). Add any environment variables if needed. The environment variables you included here will be used to run the container. (See docker documentation for environment variables precedence) \nYou will be directed to container tab. Notice the container name ‚Äútestrun1‚Äù, image name and tag ‚Äúmyfolder:1‚Äù.You can confirm that the container is currently running when the play button ‚ñ∂Ô∏è on the right hand corner is grayed out. You can stop the container by clicking on the stop button ‚èπ. Since we created our ended our Dockerfile with CMD [\"python3.8\", \"./newmodel_prediction.py\"], this means it will directly run the specified file. However, we could also manually run anything through the terminal should we wish, like so. \n\nNote: Docker containers and images take up space. You might want to delete them if unused."
  },
  {
    "objectID": "til/160824_docker_cache.html",
    "href": "til/160824_docker_cache.html",
    "title": "Clear docker cache",
    "section": "",
    "text": "A reminder on how to clear docker cache.\n\n\n\nimage-2.png\n\n\n\nCheck diskspace used by Docker\ndocker system df\n\n\nRemove Build Cache\ndocker builder prune"
  },
  {
    "objectID": "til/200624_numpy_datablock.html",
    "href": "til/200624_numpy_datablock.html",
    "title": "Creating DataBlock from Numpy Array",
    "section": "",
    "text": "Feed list of dict into DataBlock\n\nTLDR; Need to prepare our data into list of dictionaries for each sample, eg L([{x: feature1, y: label1},  {x: feature2, y: label2},  {x: featuren, y: labeln} ]) format and feed the function into get_image param of DataBlock.\n\n\nimport numpy as np\nimport pandas as pd\nimport torch\nfrom fastai.data.core import Datasets\nfrom fastai.vision.all import *\n\n\nLoad data\n\n# ref: https://www.kaggle.com/code/drkaggle22/digit-recognizer-solution-99-accuracy?scriptVersionId=181451739&cellId=3\nimport struct\n\ndef read_idx(filename):\n    with open(filename, 'rb') as f:\n        zero, data_type, dims= struct.unpack('&gt;HBB', f.read(4))\n        shape = tuple(struct.unpack('&gt;I', f.read(4))[0] for d in range(dims))\n        \n        return np.frombuffer(f.read(), dtype=np.uint8).reshape(shape)\n\ndef load_mnist(image_path, label_path):\n    images = read_idx(image_path)\n    labels = read_idx(label_path)\n    return images, labels\n\n\n\ntrain_image_path = '/kaggle/input/mnist-dataset/train-images-idx3-ubyte/train-images-idx3-ubyte'\ntrain_label_path = '/kaggle/input/mnist-dataset/train-labels-idx1-ubyte/train-labels-idx1-ubyte'\ntest_image_path =  '/kaggle/input/mnist-dataset/t10k-images-idx3-ubyte/t10k-images-idx3-ubyte'\ntest_label_path =  '/kaggle/input/mnist-dataset/t10k-labels-idx1-ubyte/t10k-labels-idx1-ubyte'\n\n\ntrain_images, train_labels = load_mnist(train_image_path, train_label_path)\ntest_images, test_labels = load_mnist(test_image_path, test_label_path)\nprint(f'Train images shape: {train_images.shape}')\nprint(f'Train labels shape: {train_labels.shape}')\nprint(f'Test images shape: {test_images.shape}')\nprint(f'Test labels shape: {test_labels.shape}')\n\nTrain images shape: (60000, 28, 28)\nTrain labels shape: (60000,)\nTest images shape: (10000, 28, 28)\nTest labels shape: (10000,)\n\n\n\nfrom collections import Counter\nprint(Counter(train_labels))\nn_classes = len(Counter(train_labels))\nprint('n_classes:', n_classes)\n\nCounter({1: 6742, 7: 6265, 3: 6131, 2: 5958, 9: 5949, 0: 5923, 6: 5918, 8: 5851, 4: 5842, 5: 5421})\nn_classes: 10\n\n\n\n\ndef tensor_to_labelled_pil_image(tensor: np.ndarray, labels=None) -&gt; list:\n    ''' ref: https://www.kaggle.com/code/pemtaira/digit-recognizer-fastai-v2-2020\n    shape image shape (total sample, height, width) into (total sample, 3, height, width),\n    save into dictionary (x: reshaped img, y: label). Append dictionary to list. return list.\n    '''\n    reshaped = tensor.reshape(-1, 28, 28) #  (total sample, 28, 28) --&gt; (total sample, 28, 28)\n    reshaped = np.stack((reshaped,) *3, axis = 1) # (total sample, 28, 28) --&gt; (total sample, 3, 28, 28)\n    image_arr = []\n    \n    # loop each reshaped images, convert to float tensor, convert to PILImage, save as dictionary, append to list\n    for idx, current_image in enumerate(reshaped):\n        img = torch.tensor(current_image, dtype=torch.float) / 255.\n        img = PILImage(to_image(img))\n        \n        final_data = None\n\n        if (labels is None):\n            final_data = {'x': img, 'y': None}\n        else:\n            final_data = {'x': img, 'y': labels[idx]}\n\n        image_arr.append(final_data)\n\n    return image_arr\n\n\ndef get_image(l:list) -&gt; L:\n    \"\"\"\n    returns list of [{'x': feature tensor, 'y': class label},\n                    {...}, {...} ]\n    L is fastai's implementation of list\n    \"\"\"\n    features = l[0]\n    labels = l[1]\n    all_imgs = tensor_to_labelled_pil_image(features, labels)\n    return L(all_imgs)\n    \n\n\ndef get_y_fromdict(item):\n    \"\"\"get y from each sample dictionary returned from get_image()\"\"\"\n    return item['y']\n\ndef get_x_fromdict(item):\n    \"\"\"get x from each sample dictionary returned from get_image()\"\"\"\n    return item['x']\n\n\n\nInitialize DataBlock\nblocks=(ImageBlock(cls=PILImage), CategoryBlock) &gt; Here we specify that our input data is an image and of class PILImage, our label is categorical\nget_items=get_image &gt; Function where we return list of {x:features, y:label} dictionary for all our samples\nsplitter=RandomSplitter(valid_pct=0.2, seed=42) &gt; Describe how we want to split our data; Here we want to split train and test data into 80-20 split randomly. We specify seed to have reproducible result for each run.\nget_x=get_x_fromdict &gt; Function to extract features from list returned from get_image() function. Note, we could also use lambda function here get_x = (lambda item: item['x']).\nget_y=get_y_fromdict &gt; Function to extract label from list returned from get_image() function. Note, we could also use lambda function here get_y = (lambda item: item['y']).\nNote that if we use lambda function when initializing DataBlock, we might need to use dill library to export our model.\n\nmnist_db = DataBlock(\n    blocks=(ImageBlock(cls=PILImage), CategoryBlock), \n    get_items=get_image, \n    splitter=RandomSplitter(valid_pct=0.2, seed=42),\n    get_y=get_y_fromdict,#(lambda item: item['y']),\n    get_x=get_x_fromdict #(lambda item: item['x'])\n)\n\n\n# checking featues and labels shapes\nprint(train_images.shape)\nprint(train_labels.shape)\n\n(60000, 28, 28)\n(60000,)\n\n\n\n# stacking both train and test sets' features\n\nprint(train_images.shape)\nprint(test_images.shape)\nnp.vstack([train_images, test_images]).shape\n\n(60000, 28, 28)\n(10000, 28, 28)\n\n\n(70000, 28, 28)\n\n\n\n# stacking both train and test sets\nprint(train_labels.shape)\nprint(test_labels.shape)\nnp.hstack([train_labels, test_labels]).shape\n\n(60000,)\n(10000,)\n\n\n(70000,)\n\n\nThis is how our data is reshaped in tensor_to_labelled_pil_image() function.\n\nfeatures = np.vstack([train_images, test_images])\nfeatures_reshaped = features.reshape(-1, 28, 28)\nfeatures_reshaped_stacked = np.stack((features_reshaped,) *3, axis = 1)\n\nprint('features.shape', features.shape)\nprint('features_reshaped.shape', features_reshaped.shape)\nprint('features_reshaped_stacked.shape', features_reshaped_stacked.shape)\n\nfeatures.shape (70000, 28, 28)\nfeatures_reshaped.shape (70000, 28, 28)\nfeatures_reshaped_stacked.shape (70000, 3, 28, 28)\n\n\n\n\nQuick plot\n\n# ref: https://stackoverflow.com/a/59296746\nimport matplotlib.pyplot as plt\nfig, axes = plt.subplots(10,10, figsize=(28,28))\nfor i,ax in enumerate(axes.flat):\n    ax.imshow(features_reshaped[i])\n\n\n\n\n\n\n\n\nLoad our source data\n\ndls = mnist_db.dataloaders([np.vstack([train_images, test_images]),\n                            np.hstack([train_labels, test_labels])])\n\n\ndls.show_batch()\n\n\n\n\n\n\n\n\n\n\nTrain model\n\nlearn = vision_learner(dls, resnet18, metrics=[error_rate, accuracy])\nlearn.fine_tune(10)\n\nDownloading: \"https://download.pytorch.org/models/resnet18-f37072fd.pth\" to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth\n100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 44.7M/44.7M [00:00&lt;00:00, 146MB/s]\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\naccuracy\ntime\n\n\n\n\n0\n0.714643\n0.483854\n0.155143\n0.844857\n04:06\n\n\n\n\n\n\n\n\n\n\n    \n      \n      90.00% [9/10 1:10:59&lt;07:53]\n    \n    \n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\naccuracy\ntime\n\n\n\n\n0\n0.170800\n0.091101\n0.026429\n0.973571\n08:18\n\n\n1\n0.098211\n0.057546\n0.018071\n0.981929\n07:50\n\n\n2\n0.070756\n0.043570\n0.013071\n0.986929\n07:54\n\n\n3\n0.045105\n0.036998\n0.010214\n0.989786\n07:51\n\n\n4\n0.034318\n0.037484\n0.010214\n0.989786\n07:51\n\n\n5\n0.032253\n0.031844\n0.007857\n0.992143\n07:49\n\n\n6\n0.013959\n0.029695\n0.006714\n0.993286\n07:47\n\n\n7\n0.006643\n0.028861\n0.006643\n0.993357\n07:48\n\n\n8\n0.002887\n0.027575\n0.006143\n0.993857\n07:48\n\n\n\n\n\n    \n      \n      22.83% [50/219 00:06&lt;00:21 0.0014]\n    \n    \n\n\nIOPub message rate exceeded.\nThe notebook server will temporarily stop sending output\nto the client in order to avoid crashing it.\nTo change this limit, set the config variable\n`--NotebookApp.iopub_msg_rate_limit`.\n\nCurrent values:\nNotebookApp.iopub_msg_rate_limit=1000.0 (msgs/sec)\nNotebookApp.rate_limit_window=3.0 (secs)\n\n\n\n\n\nSave model\n\nlearn.export('model2.pkl')\n\nIf we use lambda function when initializing DataBlock, we can use dill to save model. Eg:\n\n\nimport dill\nlearn.export('model2.pkl', pickle_module=dill)"
  },
  {
    "objectID": "til/310824_using_postgres.html",
    "href": "til/310824_using_postgres.html",
    "title": "Postgresql JOIN USING vs JOIN ON ü•û",
    "section": "",
    "text": "I recently learnt that we can directly use USING() clause as shorthand when joining tables in Postgresql. Here is the an excerpt from the documentation.\n[Click on the image to check the full documentation] \n\n--  Pets Table\nCREATE TABLE pets(id INT, type VARCHAR);\nINSERT INTO pets VALUES(1, 'dog');\nINSERT INTO pets VALUES(2, 'bird');\nINSERT INTO pets VALUES(3, 'cat');\nINSERT INTO pets VALUES(4, 'monkey');\n\n-- -- -- -- -- -- -- -- -- -- -- -- -- \n\n--  Owner Table\nCREATE TABLE owner(id INT, name VARCHAR, pet_id INT);\nINSERT INTO owner VALUES(1, 'Sarah', 1);\nINSERT INTO owner VALUES(2, 'Bob', 2);\nINSERT INTO owner VALUES(3, 'Emily', 3);\nINSERT INTO owner VALUES(4, 'John', NULL);\n\n\n\n\nimage.png\n\n\nLet‚Äôs use the tables above as an example. Say we want to merge pet_id from both of the tables to find the pet type for each person listed in Owner table.\nAn option is to use USING(pet_id) clause. This is similar to JOIN ... ON owner.pet_id = pets.pet_id but will combine all resulting unique ids from both table.\n\n--  JOIN with USING\n\nSELECT pet_id, type, name\nFROM owner\nFULL JOIN pets USING(pet_id);\n\n\n\n\nimage.png\n\n\nWe can get the same result if above it we use normal JOIN ON... with CASE clause.. but this is definitely more wordy‚Ä¶\n\n-- Normal JOIN ON... with CASE\n\nSELECT CASE\n        WHEN o.pet_id IS NULL THEN p.pet_id\n        ELSE o.pet_id\n        END AS pet_id,\n        p.type, o.name\n        FROM OWNER AS o\n        FULL JOIN pets AS p\nON o.pet_id = p.pet_id\n\n\n\n\nimage.png"
  },
  {
    "objectID": "til/190624_lesson0.html",
    "href": "til/190624_lesson0.html",
    "title": "Fastai Lesson0 Key Insights",
    "section": "",
    "text": "Notes I made while listening to Fastai Lesson0\n\n\nFinish the course.\n\n‚ÄúTenacity‚Äù is a choice\n‚ÄúTenacity‚Äù is not about ignoring the bumps but it is keeping going after the bumps\n\nRadek‚Äôs book Meta Learning: How to Learn Deep Learning And Thrive In The Digital World:\n\n4-legged table that will help you do your deep learning experiments more effectively and efficiently:\n\nCode concepts: knowing the basic ideas around the code\nEditor: knowing your tools\ngit & github: knowing how to save your work, how to pull people‚Äôs work\nssh/ Linux: knowing how to access a server and do stuff with it\n\n\nThere‚Äôs nothing to be ashamed of if you‚Äôve never used git or ssh or whatever, they are just tools that most people have to figure out in the journey.\nRecommended MOOC to get started on programming:\n\nHarvard CS50\nThe Missing Semester of Your CS Education\n\nFocus on making 1 project great and polishing it off and finishing it.\n\nThe project doesn‚Äôt have to be a pioneer\n\nWrite a blog.\n\nGood place to start: write down a talk/video that you like. Doing this helps the person giving the talk reaching people using a second medium, and help others learning about the talk in writings (a lot of poeple prefer reading than listening).\n\nCreate a good validation set.\n\nBlog post by Rachel Thomas\n\nAlways start with a simple baseline.\n\nA baseline: the simplest model you can that you know can solve the problem so simply that you can‚Äôt make any mistakes. Below are some example baselines:\n\nTaking the average of your data as the ypred for each ‚Äògroup‚Äô\n\nIn deep learning, it is much harder to see that you are wrong, often it is just going to be half percent less accurate etc. For example, it could be that you unknowingly fed in images are upside down, and trained a model that can only recognize upside down images.\n\nSuccessful machine learning projects:\n\nCreate the simplest possible solution that gets something all the way from end-to-end.\nGradually making it slightly better.\n\nDo Kaggle competition as your project.\n\nMindset: To do your best, instead of trying to win on your first competition.\n\nImportant ingredients on finding a job:\n\nPortfolio: blog posts, github projects, community engagement"
  },
  {
    "objectID": "til/190724_how-to-save-load-fastai-model.html",
    "href": "til/190724_how-to-save-load-fastai-model.html",
    "title": "How to Save & Load FastAI Model",
    "section": "",
    "text": "Save model using learn.export(checkpoint_path). Load using learn = load_learner(checkpoint_path)\n\nI had a hard time figuring out how to save and load trained fastai model. So, this is a guide to remind myself of what I‚Äôve tried (and failed), and what works.\n\nimport pickle\nimport gc\nimport os\nimport glob\nfrom typing import Union\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom fastai.vision.all import *\n\n\nimport fastai\nfastai.__version__\n\n'2.7.15'\n\n\n\ndef unpickle(fp):\n    print('loading', fp)\n    with open(fp, 'rb') as f:\n        x = pd.read_pickle(f)\n        # x = pickle.load(f, encoding='ASCII')\n    return x\n\n\ndef unpickle_multiple_pd(path:Union[str,list], drop_dup_on_cols:Union[None, list]) -&gt; pd.DataFrame:\n    \"\"\"unpickle multiple pandas dataframes\n    input & output = pandas df\n\n    if `drop_dup_on_cols` is not None, will drop duplicate on `drop_dup_on_cols` cols.\n    \"\"\"\n    import gc\n    import glob\n    \n    print('path', type(path), path)\n    if isinstance(path, list):\n        filenames = path\n    else:\n\n        filenames = list(glob.glob(path))\n        \n    print('loading', filenames)\n    if len(filenames) &gt; 1:\n        \n        loaded_file = []\n\n        for i,f in enumerate(filenames):\n            if f != '':\n                try:\n                    loaded_file.append(unpickle(f))\n                    print('i', i)\n                    gc.collect()\n                except:\n                    print('loading error')\n                    continue\n        gc.collect()\n        df = pd.concat(loaded_file)\n        if drop_dup_on_cols is not None:\n            df = df.drop_duplicates(subset=drop_dup_on_cols)\n        return df.reset_index(drop=True)\n    return unpickle(filenames[0])\n\n\n\ndef save_pickle(fp:str, x) -&gt; None:\n    with open(fp, 'wb') as f:\n        pickle.dump(x, f)\n    print('saved pickle', fp)\n\n\nfp = '/kaggle/input/ordergen-transformers-prepostprocesd-17072024/Archive2/20210104_20231031_trainxyz_testxyz_ori.pkl'\nXtrain, ytrain, train_annos, Xtest, ytest, test_annos = unpickle(fp)\n\nloading /kaggle/input/ordergen-transformers-prepostprocesd-17072024/Archive2/20210104_20231031_trainxyz_testxyz_ori.pkl\n\n\n\nprint(Xtrain.shape)\nXtrain\n\n(839200, 744)\n\n\narray([[ 0.8008967 ,  0.8019981 ,  0.70472926, ...,  0.        ,\n         0.        ,  0.        ],\n       [ 0.37820956,  0.37688217,  0.37682053, ...,  0.        ,\n         0.        ,  0.        ],\n       [-0.30258572, -0.3024994 , -0.3730603 , ...,  0.        ,\n         0.        ,  0.        ],\n       ...,\n       [-1.        , -1.        , -1.        , ...,  0.        ,\n         0.        ,  0.        ],\n       [-1.        , -1.        , -1.        , ...,  0.        ,\n         0.        ,  0.        ],\n       [-1.        , -1.        , -1.        , ...,  0.        ,\n         0.        ,  0.6666667 ]], dtype=float32)\n\n\n\nprint(ytrain.shape)\nytrain\n\n(839200, 1)\n\n\narray([[0],\n       [0],\n       [0],\n       ...,\n       [0],\n       [0],\n       [0]], dtype=uint8)\n\n\n\ndef pass_index(idx):\n    return idx\n\ndef get_x(i):\n    return image[i]\n\ndef get_y(i):\n    return label[i]\n\n\nSLICE = 1000 # for demonstration, we will work on small sample slice only\n\nimage = Xtrain[:SLICE]\nlabel = ytrain[:SLICE,0] # select the first axis (col) because my labels are in 2 dimensional ie (total rows, 1)\n\ndblock = DataBlock(\n    blocks=(ImageBlock, CategoryBlock),\n    get_items=pass_index,\n    get_x=get_x,\n    get_y=get_y)\n\n# pass in a list of index\nnum_images = image.shape[0]\ndls = dblock.dataloaders(list(range(num_images)))\n\nNote: We won‚Äôt be able to save the model if we have nested functions. Like below. Notice we have pass_index, get_x, get_y functions inside the make_dataloaders_from_numpy_data. The workaround is to move it out of the function.\n\ndef make_dataloaders_from_numpy_data(image, label):\n    def pass_index(idx):\n        return idx\n\n    def get_x(i):\n        return image[i]\n\n    def get_y(i):\n        return label[i]\n\n    dblock = DataBlock(\n        blocks=(ImageBlock, CategoryBlock),\n        get_items=pass_index,\n        get_x=get_x,\n        get_y=get_y)\n\n    # pass in a list of index\n    num_images = image.shape[0]\n    dls = dblock.dataloaders(list(range(num_images)))\n\n    return dls\n\ndls = make_dataloaders_from_numpy_data(Xtrain, ytrain[:,0])\n\n\nTrain model\n\nlearn = vision_learner(dls, models.resnet18, loss_func=CrossEntropyLossFlat(), metrics=accuracy)\n\nDownloading: \"https://download.pytorch.org/models/resnet18-f37072fd.pth\" to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth\n100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 44.7M/44.7M [00:00&lt;00:00, 133MB/s] \n\n\n\nlearn.fine_tune(10)\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n0.690889\n0.820386\n0.810000\n00:48\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n0.534998\n0.656172\n0.805000\n01:04\n\n\n1\n0.519913\n0.644092\n0.660000\n01:05\n\n\n2\n0.501660\n0.590537\n0.755000\n01:04\n\n\n3\n0.481192\n0.602440\n0.800000\n01:04\n\n\n4\n0.448506\n0.559592\n0.775000\n01:05\n\n\n5\n0.395029\n0.629317\n0.735000\n01:05\n\n\n6\n0.354913\n0.627367\n0.800000\n01:04\n\n\n7\n0.302945\n0.688665\n0.780000\n01:04\n\n\n8\n0.265921\n0.668892\n0.790000\n01:05\n\n\n9\n0.231195\n0.661298\n0.785000\n01:05\n\n\n\n\n\nFor fun, let‚Äôs plot the model‚Äôs loss, and confusion matrix.\n\nlearn.recorder.plot_loss()\n\n\n\n\n\n\n\n\n\ninterp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSave trained model\nI saved my trained model in 3 different file extensions (1 of them is actually saved without any specified file extension).\n\ncheckpoint_path = '/kaggle/working/my_fastai_model_export'\nlearn.export(checkpoint_path)\n\n\ncheckpoint_path = '/kaggle/working/my_fastai_model_pth_export.pth'\nlearn.export(checkpoint_path)\n\n\n\ncheckpoint_path = '/kaggle/working/my_fastai_pkl_export.pkl'\nlearn.export(checkpoint_path)\n\n\n\nLoad trained model & get batch predictions\nTo load trained model, I restart the kernel so we can test that this actually works. I did not rerun any code cells above, just the importing libraries cell.\nFirst of, we need to reinitialize all our dataset preprocessing things. But instead of working with the same training data, we will load out of sample test set.\n\n\nfp = '/kaggle/input/ordergen-transformers-prepostprocesd-17072024/Archive2/20240429_20240503_testxyz_ori.pkl'\ntest_features, test_targets, annotations = unpickle(fp)\n\nloading /kaggle/input/ordergen-transformers-prepostprocesd-17072024/Archive2/20240429_20240503_testxyz_ori.pkl\n\n\n\nprint(test_features.shape)\ntest_features\n\n(26856, 744)\n\n\narray([[ 0.6689392 ,  0.6722139 ,  0.66988313, ...,  0.        ,\n         0.        ,  0.        ],\n       [ 0.56092703,  0.5576653 ,  0.5589551 , ...,  0.        ,\n         0.        ,  0.        ],\n       [-0.1795841 , -0.18068182, -0.17959571, ...,  0.        ,\n         0.        ,  0.        ],\n       ...,\n       [ 0.25185028,  0.25209376,  0.25152162, ...,  0.        ,\n         0.        ,  0.        ],\n       [ 0.8822221 ,  0.88193876,  0.8785461 , ...,  0.        ,\n         0.        ,  0.        ],\n       [-0.5615684 , -0.6948581 , -0.68838125, ...,  0.        ,\n         0.        ,  0.        ]], dtype=float32)\n\n\n\nprint(test_targets.shape)\ntest_targets\n\n(26856, 1)\n\n\narray([[0],\n       [0],\n       [0],\n       ...,\n       [0],\n       [0],\n       [0]], dtype=uint8)\n\n\nWe need to re-define the same functions and DataBlock and dataloaders we used to trained the model.\n\ndef pass_index(idx):\n    return idx\n\ndef get_x(i):\n    return image[i]\n\ndef get_y(i):\n    return label[i]\n\nBut this time, using the new test set.\n\nSLICE = 1000 # for demonstration, we will work on small sample slice only\nimage = test_features[:SLICE]\nlabel = test_targets[:SLICE,0] # select the first axis because my labels are in 2 dimensional ie (total rows, 1)\n\n\n\n\ndblock = DataBlock(\n    blocks=(ImageBlock, CategoryBlock),\n    get_items=pass_index,\n    get_x=get_x,\n    get_y=get_y)\n\n# pass in a list of index\nnum_images = image.shape[0]\ndls = dblock.dataloaders(list(range(num_images)))\n\nLet‚Äôs test loading all our saved model one by one.\n\n\ncheckpoint_path1 = '/kaggle/input/dummy_fastai_model/other/test2/1/my_fastai_model_export'\n\n\nlearn1 = vision_learner(dls, models.resnet18, loss_func=CrossEntropyLossFlat(), metrics=accuracy)\nlearn1 = load_learner(checkpoint_path1)\n\ntest_dl1 = learn1.dls.test_dl(test_features[:SLICE])\n\n# get batch prediction\nypreds1, _ = learn1.get_preds(dl=test_dl1)\nypreds1\n\nDownloading: \"https://download.pytorch.org/models/resnet18-f37072fd.pth\" to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth\n100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 44.7M/44.7M [00:00&lt;00:00, 61.4MB/s]\n\n\n\n\n\n\n\n\n\ntensor([[9.5914e-01, 4.0856e-02],\n        [8.6308e-01, 1.3692e-01],\n        [4.6716e-01, 5.3284e-01],\n        ...,\n        [9.9386e-01, 6.1434e-03],\n        [9.2105e-01, 7.8951e-02],\n        [9.9948e-01, 5.2483e-04]])\n\n\n\n\ncheckpoint_path2 = '/kaggle/input/dummy_fastai_model/other/test2/1/my_fastai_model_pth_export.pth'\n\n\nlearn2 = vision_learner(dls, models.resnet18, loss_func=CrossEntropyLossFlat(), metrics=accuracy)\nlearn2 = load_learner(checkpoint_path2)\n\ntest_dl2 = learn2.dls.test_dl(test_features[:SLICE])\n\n# get batch prediction\nypreds2, _ = learn2.get_preds(dl=test_dl2)\nypreds2\n\n\n\n\n\n\n\n\ntensor([[9.5914e-01, 4.0856e-02],\n        [8.6308e-01, 1.3692e-01],\n        [4.6716e-01, 5.3284e-01],\n        ...,\n        [9.9386e-01, 6.1434e-03],\n        [9.2105e-01, 7.8951e-02],\n        [9.9948e-01, 5.2483e-04]])\n\n\n\n\ncheckpoint_path3 = '/kaggle/input/dummy_fastai_model/other/test2/1/my_fastai_pkl_export.pkl'\n\n\nlearn3 = vision_learner(dls, models.resnet18, loss_func=CrossEntropyLossFlat(), metrics=accuracy)\nlearn3 = load_learner(checkpoint_path3)\n\ntest_dl3 = learn3.dls.test_dl(test_features[:SLICE])\n\n# get batch prediction\nypreds3, _ = learn3.get_preds(dl=test_dl3)\nypreds3\n\n\n\n\n\n\n\n\ntensor([[9.5914e-01, 4.0856e-02],\n        [8.6308e-01, 1.3692e-01],\n        [4.6716e-01, 5.3284e-01],\n        ...,\n        [9.9386e-01, 6.1434e-03],\n        [9.2105e-01, 7.8951e-02],\n        [9.9948e-01, 5.2483e-04]])\n\n\n\n\n(‚Ä¶What doesn‚Äôt work)\nUsing learn.load(checkpoint_path) does not work. For some reason I get FileNotFoundError but they clearly exist‚Ä¶\n\n\ncheckpoint_path01 = '/kaggle/input/dummy_fastai_model/other/test2/1/my_fastai_model_export'\nlearn01 = vision_learner(dls, models.resnet18, loss_func=CrossEntropyLossFlat(), metrics=accuracy)\nlearn01.load(checkpoint_path01)  # this does not work\n\n\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[16], line 3\n      1 checkpoint_path01 = '/kaggle/input/dummy_fastai_model/other/test2/1/my_fastai_model_export'\n      2 learn01 = vision_learner(dls, models.resnet18, loss_func=CrossEntropyLossFlat(), metrics=accuracy)\n----&gt; 3 learn01.load(checkpoint_path01)  # this does not work\n\nFile /opt/conda/lib/python3.10/site-packages/fastai/learner.py:420, in load(self, file, device, **kwargs)\n    418 file = join_path_file(file, self.path/self.model_dir, ext='.pth')\n    419 distrib_barrier()\n--&gt; 420 load_model(file, self.model, self.opt, device=device, **kwargs)\n    421 return self\n\nFile /opt/conda/lib/python3.10/site-packages/fastai/learner.py:51, in load_model(file, model, opt, with_opt, device, strict, **torch_load_kwargs)\n     49 if isinstance(device, int): device = torch.device('cuda', device)\n     50 elif device is None: device = 'cpu'\n---&gt; 51 state = torch.load(file, map_location=device, **torch_load_kwargs)\n     52 hasopt = set(state)=={'model', 'opt'}\n     53 model_state = state['model'] if hasopt else state\n\nFile /opt/conda/lib/python3.10/site-packages/torch/serialization.py:986, in load(f, map_location, pickle_module, weights_only, mmap, **pickle_load_args)\n    983 if 'encoding' not in pickle_load_args.keys():\n    984     pickle_load_args['encoding'] = 'utf-8'\n--&gt; 986 with _open_file_like(f, 'rb') as opened_file:\n    987     if _is_zipfile(opened_file):\n    988         # The zipfile reader is going to advance the current file position.\n    989         # If we want to actually tail call to torch.jit.load, we need to\n    990         # reset back to the original position.\n    991         orig_position = opened_file.tell()\n\nFile /opt/conda/lib/python3.10/site-packages/torch/serialization.py:435, in _open_file_like(name_or_buffer, mode)\n    433 def _open_file_like(name_or_buffer, mode):\n    434     if _is_path(name_or_buffer):\n--&gt; 435         return _open_file(name_or_buffer, mode)\n    436     else:\n    437         if 'w' in mode:\n\nFile /opt/conda/lib/python3.10/site-packages/torch/serialization.py:416, in _open_file.__init__(self, name, mode)\n    415 def __init__(self, name, mode):\n--&gt; 416     super().__init__(open(name, mode))\n\nFileNotFoundError: [Errno 2] No such file or directory: '/kaggle/input/dummy_fastai_model/other/test2/1/my_fastai_model_export.pth'\n\n\n\n\n\ncheckpoint_path02 = '/kaggle/input/dummy_fastai_model/other/test2/1/my_fastai_model_pth_export.pth'\nlearn02 = vision_learner(dls, models.resnet18, loss_func=CrossEntropyLossFlat(), metrics=accuracy)\nlearn02.load(checkpoint_path02)  # this does not work\n\n\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[17], line 3\n      1 checkpoint_path02 = '/kaggle/input/dummy_fastai_model/other/test2/1/my_fastai_model_pth_export.pth'\n      2 learn02 = vision_learner(dls, models.resnet18, loss_func=CrossEntropyLossFlat(), metrics=accuracy)\n----&gt; 3 learn02.load(checkpoint_path02)  # this does not work\n\nFile /opt/conda/lib/python3.10/site-packages/fastai/learner.py:420, in load(self, file, device, **kwargs)\n    418 file = join_path_file(file, self.path/self.model_dir, ext='.pth')\n    419 distrib_barrier()\n--&gt; 420 load_model(file, self.model, self.opt, device=device, **kwargs)\n    421 return self\n\nFile /opt/conda/lib/python3.10/site-packages/fastai/learner.py:51, in load_model(file, model, opt, with_opt, device, strict, **torch_load_kwargs)\n     49 if isinstance(device, int): device = torch.device('cuda', device)\n     50 elif device is None: device = 'cpu'\n---&gt; 51 state = torch.load(file, map_location=device, **torch_load_kwargs)\n     52 hasopt = set(state)=={'model', 'opt'}\n     53 model_state = state['model'] if hasopt else state\n\nFile /opt/conda/lib/python3.10/site-packages/torch/serialization.py:986, in load(f, map_location, pickle_module, weights_only, mmap, **pickle_load_args)\n    983 if 'encoding' not in pickle_load_args.keys():\n    984     pickle_load_args['encoding'] = 'utf-8'\n--&gt; 986 with _open_file_like(f, 'rb') as opened_file:\n    987     if _is_zipfile(opened_file):\n    988         # The zipfile reader is going to advance the current file position.\n    989         # If we want to actually tail call to torch.jit.load, we need to\n    990         # reset back to the original position.\n    991         orig_position = opened_file.tell()\n\nFile /opt/conda/lib/python3.10/site-packages/torch/serialization.py:435, in _open_file_like(name_or_buffer, mode)\n    433 def _open_file_like(name_or_buffer, mode):\n    434     if _is_path(name_or_buffer):\n--&gt; 435         return _open_file(name_or_buffer, mode)\n    436     else:\n    437         if 'w' in mode:\n\nFile /opt/conda/lib/python3.10/site-packages/torch/serialization.py:416, in _open_file.__init__(self, name, mode)\n    415 def __init__(self, name, mode):\n--&gt; 416     super().__init__(open(name, mode))\n\nFileNotFoundError: [Errno 2] No such file or directory: '/kaggle/input/dummy_fastai_model/other/test2/1/my_fastai_model_pth_export.pth.pth'\n\n\n\n\n\ncheckpoint_path03 = '/kaggle/input/dummy_fastai_model/other/test2/1/my_fastai_pkl_export'\nlearn03 = vision_learner(dls, models.resnet18, loss_func=CrossEntropyLossFlat(), metrics=accuracy)\nlearn03.load(checkpoint_path03)  # this does not work\n\n\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[26], line 3\n      1 checkpoint_path03 = '/kaggle/input/dummy_fastai_model/other/test2/1/my_fastai_pkl_export'\n      2 learn03 = vision_learner(dls, models.resnet18, loss_func=CrossEntropyLossFlat(), metrics=accuracy)\n----&gt; 3 learn03.load(checkpoint_path03)  # this does not work\n\nFile /opt/conda/lib/python3.10/site-packages/fastai/learner.py:420, in load(self, file, device, **kwargs)\n    418 file = join_path_file(file, self.path/self.model_dir, ext='.pth')\n    419 distrib_barrier()\n--&gt; 420 load_model(file, self.model, self.opt, device=device, **kwargs)\n    421 return self\n\nFile /opt/conda/lib/python3.10/site-packages/fastai/learner.py:51, in load_model(file, model, opt, with_opt, device, strict, **torch_load_kwargs)\n     49 if isinstance(device, int): device = torch.device('cuda', device)\n     50 elif device is None: device = 'cpu'\n---&gt; 51 state = torch.load(file, map_location=device, **torch_load_kwargs)\n     52 hasopt = set(state)=={'model', 'opt'}\n     53 model_state = state['model'] if hasopt else state\n\nFile /opt/conda/lib/python3.10/site-packages/torch/serialization.py:986, in load(f, map_location, pickle_module, weights_only, mmap, **pickle_load_args)\n    983 if 'encoding' not in pickle_load_args.keys():\n    984     pickle_load_args['encoding'] = 'utf-8'\n--&gt; 986 with _open_file_like(f, 'rb') as opened_file:\n    987     if _is_zipfile(opened_file):\n    988         # The zipfile reader is going to advance the current file position.\n    989         # If we want to actually tail call to torch.jit.load, we need to\n    990         # reset back to the original position.\n    991         orig_position = opened_file.tell()\n\nFile /opt/conda/lib/python3.10/site-packages/torch/serialization.py:435, in _open_file_like(name_or_buffer, mode)\n    433 def _open_file_like(name_or_buffer, mode):\n    434     if _is_path(name_or_buffer):\n--&gt; 435         return _open_file(name_or_buffer, mode)\n    436     else:\n    437         if 'w' in mode:\n\nFile /opt/conda/lib/python3.10/site-packages/torch/serialization.py:416, in _open_file.__init__(self, name, mode)\n    415 def __init__(self, name, mode):\n--&gt; 416     super().__init__(open(name, mode))\n\nFileNotFoundError: [Errno 2] No such file or directory: '/kaggle/input/dummy_fastai_model/other/test2/1/my_fastai_pkl_export.pth'\n\n\n\n\n\nChecking our ypreds\n\n# probabilities for class0\npd.DataFrame(ypreds1)[0].hist()\n\n\n\n\n\n\n\n\n\n# probabilities for class 1\npd.DataFrame(ypreds1)[1].hist()\n\n\n\n\n\n\n\n\nAll is well, but for some reason, I could not plot a confusion matrix.\n\ninterp = ClassificationInterpretation.from_learner(learn3)\ninterp.plot_confusion_matrix()\n\n\"\"\"\nTraceback:\n{\n    \"name\": \"ValueError\",\n    \"message\": \"not enough values to unpack (expected 3, got 2)\",\n    \"stack\": \"---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[25], line 2\n      1 interp = ClassificationInterpretation.from_learner(learn3)\n----&gt; 2 interp.plot_confusion_matrix()\n\nFile /opt/conda/lib/python3.10/site-packages/fastai/interpret.py:130, in ClassificationInterpretation.plot_confusion_matrix(self, normalize, title, cmap, norm_dec, plot_txt, **kwargs)\n    128 \\\"Plot the confusion matrix, with `title` and using `cmap`.\\\"\n    129 # This function is mainly copied from the sklearn docs\n--&gt; 130 cm = self.confusion_matrix()\n    131 if normalize: cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n    132 fig = plt.figure(**kwargs)\n\nFile /opt/conda/lib/python3.10/site-packages/fastai/interpret.py:114, in ClassificationInterpretation.confusion_matrix(self)\n    112 \\\"Confusion matrix as an `np.ndarray`.\\\"\n    113 x = torch.arange(0, len(self.vocab))\n--&gt; 114 _,targs,decoded = self.learn.get_preds(dl=self.dl, with_decoded=True, with_preds=True, \n    115                                        with_targs=True, act=self.act)\n    116 d,t = flatten_check(decoded, targs)\n    117 cm = ((d==x[:,None]) & (t==x[:,None,None])).long().sum(2)\n\nValueError: not enough values to unpack (expected 3, got 2)\"\n}\n\"\"\"\n\n\n\nConclusion\nThis is all still a bit of a mystery to me. I just started learning to use the library, but as of now it feels like the API is not very stable. I had to experiment a lot of times to get the trained model working. And it is puzzling that I did not run into any error in another notebook. Here is what I did in another notebook that I could not successfully replicate here.\n# load data and train model..\n\n# save model\ncheckpoint_path = 'fastai_timeseries.pkl'\nlearn.export(checkpoint_path)\n\n# I restart kernel here before continuing below.\n\n# redefine everything\nimage = test_features\nlabel = test_targets[:,0]\n\ndblock = DataBlock(\n    blocks=(ImageBlock, CategoryBlock),\n    get_items=pass_index,\n    get_x=get_x,\n    get_y=get_y)\n\nnum_images = image.shape[0]\ndls = dblock.dataloaders(list(range(num_images)))\n\n# init learn\nlearn = vision_learner(dls, models.resnet18, loss_func=CrossEntropyLossFlat(), metrics=accuracy)\n\n# load model\ncheckpoint_path = '/kaggle/input/ordergen_timeseries_fastai/other/default/1/fastai_timeseries'\nlearn.load(checkpoint_path)        #### &lt;-------- diff is here\nSo, in short:\n\nWe save model by learn.export(checkpoint_path)\nThe file extension for checkpoint_path does not matter. When I omit the file extension entirely, we can still load and get predictions. Here is what I tried as checkpoint_path: [‚Äòmodel‚Äô, ‚Äòmodel.pth‚Äô, ‚Äòmodel.pkl‚Äô].\nWe need to redefine all functions we used to trained the model (ie get_x, get_y, ‚Ä¶).\nWe load model by:\n\ncheckpoint_path = any one of ['model', 'model.pth', 'model.pkl']\n\n# load model\nlearn = vision_learner(dls, models.resnet18, loss_func=CrossEntropyLossFlat(), metrics=accuracy)\nlearn = load_learner(checkpoint_path)\n\n# init test dataloader\ntest_dl = learn.dls.test_dl(test_features)\n\n# get batch prediction\nypreds, _ = learn.get_preds(dl=test_dl)"
  },
  {
    "objectID": "til/130624_fastai_AttributeError.html",
    "href": "til/130624_fastai_AttributeError.html",
    "title": "TabularPandas AttributeError: classes",
    "section": "",
    "text": "Specify procs TabularPandas(..., procs = [Categorify]) when you have categorical columns\n\n\n\n\n\n\n\nNote\n\n\n\nThis post was written using: - pandas: 2.2.2 - fastai: 2.7.15\n\n\n\nimport pandas as pd\nfrom fastai.tabular.all import *\n\n\n# looking at unique values in each columns to split categorical / continuous features\nfor k in df.keys():\n    print(f\"Column {k}:\\n{Counter(df[k])}\")\n    print()\n\nColumn a:\nCounter({2.0: 8435, 1.0: 2580, 3.0: 2011})\n\nColumn b:\nCounter({12.0: 9853, 32.0: 2911, 80.0: 87, 16.0: 72, 11.0: 47, 8.0: 28, 10.0: 25, 40.0: 3})\n\nColumn c:\nCounter({0: 1579, 5: 1517, 6: 1271, 7: 1213, 4: 1211, 8: 1081, 3: 898, 9: 831, 10: 682, 2: 608, 1: 342, 11: 278, 14: 216, 12: 206, 16: 184, 13: 165, 15: 145, 17: 131, 18: 94, 19: 88, 20: 66, 21: 57, 23: 54, 29: 24, 26: 18, 24: 16, 27: 16, 22: 12, 30: 12, 25: 7, 28: 4})\n\nColumn d:\nCounter({15.0: 7521, -1.0: 1433, 8.0: 374, 0.0: 372, 7.0: 365, 9.0: 334, 10.0: 319, 6.0: 316, 5.0: 272, 11.0: 264, 4.0: 241, 12.0: 220, 3.0: 217, 13.0: 205, 14.0: 176, 2.0: 170, 1.0: 164, -3.0: 14, -2.0: 4, -4.0: 3, -27.0: 3, -5.0: 3, -22.0: 2, -26.0: 2, -30.0: 2, -16.0: 2, -7.0: 2, -17.0: 2, -21.0: 1, -23.0: 1, -25.0: 1, -28.0: 1, -31.0: 1, -32.0: 1, -53.0: 1, -56.0: 1, -57.0: 1, -58.0: 1, -59.0: 1, -88.0: 1, -93.0: 1, -98.0: 1, -38.0: 1, -8.0: 1, -11.0: 1, -14.0: 1, -18.0: 1, -9.0: 1, -10.0: 1, -43.0: 1, -49.0: 1, -6.0: 1})\n\nColumn e:\nCounter({4.1: 1285, 3.4: 912, 3.3: 905, 4.0: 884, 4.2: 812, 3.5: 797, 3.6: 713, 3.7: 708, 3.2: 666, 3.9: 640, 3.8: 628, 4.3: 512, 4.4: 359, 2.1: 351, 4.5: 294, 3.1: 276, 2.2: 269, 4.6: 216, 2.3: 185, 4.7: 175, 2.4: 145, 4.8: 142, 4.9: 135, 5.0: 130, 5.1: 90, 2.5: 88, 5.2: 72, 2.6: 66, 2.8: 64, 2.7: 64, 5.3: 58, 3.0: 54, 2.9: 50, 2.0: 38, 5.4: 34, 5.5: 28, 6.3: 22, 6.6: 21, 5.7: 16, 6.2: 16, 5.6: 16, 5.8: 15, 6.7: 14, 6.8: 12, 6.1: 12, 6.5: 9, 5.9: 8, 6.4: 6, 6.0: 4, 7.2: 4, 6.9: 3, 7.0: 1, 7.5: 1, 7.1: 1})\n\nColumn f:\nCounter({0.7: 1475, 0.6: 1472, 0.8: 1444, 1.0: 1385, 0.9: 1335, 0.5: 1249, 0.4: 1014, 1.1: 974, 0.3: 708, 0.0: 482, 0.2: 423, 0.1: 294, 1.2: 241, 1.3: 119, 1.4: 81, 1.5: 56, 1.6: 37, 1.8: 33, 1.9: 25, -0.1: 23, 1.7: 22, -1.1: 19, 2.3: 15, 2.4: 12, 2.1: 9, -1.3: 9, -0.6: 8, -0.9: 8, -0.7: 7, 2.0: 7, -0.8: 5, -1.9: 5, -1.2: 4, 2.2: 4, -0.2: 4, 2.8: 3, 2.6: 2, 2.5: 2, -0.3: 2, -0.5: 2, 5.1: 1, -1.0: 1, 2.7: 1, 3.0: 1, -1.8: 1, -1.6: 1, -4.5: 1})\n\nColumn label:\nCounter({0.0: 11000, 1.0: 2026})\n\n\n\n\n# define categorical and continuous features\ncat_names = ['a', 'b']\ny_names = 'label'\ncont_names = [c for c in df.keys() if c not in cat_names+[y_names]]\n\n\nprint('cat_names:',cat_names)\nprint('cont_names:',cont_names)\nprint('y_names:',y_names)\n\ncat_names: ['a', 'b']\ncont_names: ['c', 'd', 'e', 'f']\ny_names: label\n\n\n\n# split into train and test\nval_index = list(df.sample(frac=0.2, random_state=0).index) # 20% from total df\ntrain_index = list(df[~df.index.isin(val_index)].index)\n\nassert (len([i for i in train_index if i in set(val_index)])==0 \n        and len([i for i in val_index if i in set(train_index)])==0), 'train and val set are overlapping!'\n\nprint('train set len', len(train_index))\nprint('val set len', len(val_index))\n\ntrain set len 10421\nval set len 2605\n\n\n\nError Example\n\n# oh no, can't train!\n\ndl = TabularPandas(df, \n                   cat_names=cat_names, \n                   cont_names=cont_names, \n                   y_names=y_names,\n                   y_block = CategoryBlock(vocab=df[y_names]), \n                   splits=(train_index, val_index))\n\ndls = dl.dataloaders(bs=64)\nprint(dls.show_batch())\nlearn = tabular_learner(dls, metrics=[accuracy])\nlearn.fit_one_cycle(3)\n\n\n\n\n\na\nb\nc\nd\ne\nf\nlabel\n\n\n\n\n0\n1.0\n12.0\n7.0\n9.0\n3.9\n0.6\n0.0\n\n\n1\n2.0\n12.0\n3.0\n15.0\n4.1\n0.3\n0.0\n\n\n2\n2.0\n12.0\n4.0\n-1.0\n4.0\n0.7\n0.0\n\n\n3\n2.0\n12.0\n11.0\n15.0\n4.1\n1.4\n0.0\n\n\n4\n2.0\n12.0\n4.0\n12.0\n4.2\n0.6\n0.0\n\n\n5\n2.0\n32.0\n14.0\n6.0\n5.2\n0.2\n0.0\n\n\n6\n1.0\n12.0\n4.0\n9.0\n3.2\n0.3\n1.0\n\n\n7\n3.0\n32.0\n5.0\n15.0\n3.5\n0.7\n0.0\n\n\n8\n2.0\n12.0\n3.0\n14.0\n2.6\n0.5\n0.0\n\n\n9\n3.0\n12.0\n0.0\n-2.0\n4.1\n-0.0\n0.0\n\n\n\n\n\nNone\n\n\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[43], line 10\n      8 dls = dl.dataloaders(bs=64)\n      9 print(dls.show_batch())\n---&gt; 10 learn = tabular_learner(dls, metrics=[accuracy])\n     11 learn.fit_one_cycle(3)\n\nFile /opt/homebrew/Caskroom/miniforge/base/envs/fastai/lib/python3.11/site-packages/fastai/tabular/learner.py:42, in tabular_learner(dls, layers, emb_szs, config, n_out, y_range, **kwargs)\n     40 if layers is None: layers = [200,100]\n     41 to = dls.train_ds\n---&gt; 42 emb_szs = get_emb_sz(dls.train_ds, {} if emb_szs is None else emb_szs)\n     43 if n_out is None: n_out = get_c(dls)\n     44 assert n_out, \"`n_out` is not defined, and could not be inferred from data, set `dls.c` or pass `n_out`\"\n\nFile /opt/homebrew/Caskroom/miniforge/base/envs/fastai/lib/python3.11/site-packages/fastai/tabular/model.py:32, in get_emb_sz(to, sz_dict)\n     27 def get_emb_sz(\n     28     to:Tabular|TabularPandas, \n     29     sz_dict:dict=None # Dictionary of {'class_name' : size, ...} to override default `emb_sz_rule` \n     30 ) -&gt; list: # List of embedding sizes for each category\n     31     \"Get embedding size for each cat_name in `Tabular` or `TabularPandas`, or populate embedding size manually using sz_dict\"\n---&gt; 32     return [_one_emb_sz(to.classes, n, sz_dict) for n in to.cat_names]\n\nFile /opt/homebrew/Caskroom/miniforge/base/envs/fastai/lib/python3.11/site-packages/fastai/tabular/model.py:32, in &lt;listcomp&gt;(.0)\n     27 def get_emb_sz(\n     28     to:Tabular|TabularPandas, \n     29     sz_dict:dict=None # Dictionary of {'class_name' : size, ...} to override default `emb_sz_rule` \n     30 ) -&gt; list: # List of embedding sizes for each category\n     31     \"Get embedding size for each cat_name in `Tabular` or `TabularPandas`, or populate embedding size manually using sz_dict\"\n---&gt; 32     return [_one_emb_sz(to.classes, n, sz_dict) for n in to.cat_names]\n\nFile /opt/homebrew/Caskroom/miniforge/base/envs/fastai/lib/python3.11/site-packages/fastcore/basics.py:507, in GetAttr.__getattr__(self, k)\n    505 if self._component_attr_filter(k):\n    506     attr = getattr(self,self._default,None)\n--&gt; 507     if attr is not None: return getattr(attr,k)\n    508 raise AttributeError(k)\n\nFile /opt/homebrew/Caskroom/miniforge/base/envs/fastai/lib/python3.11/site-packages/fastcore/transform.py:212, in Pipeline.__getattr__(self, k)\n--&gt; 212 def __getattr__(self,k): return gather_attrs(self, k, 'fs')\n\nFile /opt/homebrew/Caskroom/miniforge/base/envs/fastai/lib/python3.11/site-packages/fastcore/transform.py:173, in gather_attrs(o, k, nm)\n    171 att = getattr(o,nm)\n    172 res = [t for t in att.attrgot(k) if t is not None]\n--&gt; 173 if not res: raise AttributeError(k)\n    174 return res[0] if len(res)==1 else L(res)\n\nAttributeError: classes\n\n\n\nHow to fix this?\nI actually went down the rabbit hole and provided the emb_szs manually as mentioned in the source code hinted by error message above, but there is actually an easier way ‚Äì just add procs=[Categorify] when initializing TabularPandas.\n\nIn the source code, emb_szs is expected to be {'class_name' : size, ...}. So for example if column a is a categorical column in our df, then emb_szs = {'a': len(unique value in column 'a')}.\n\n\n\nWorking Example\n\n# now we can train\n\ndl = TabularPandas(df, \n                   cat_names=cat_names, \n                   cont_names=cont_names, \n                   y_names=y_names,\n                   y_block = CategoryBlock(vocab=df[y_names]), \n                   splits=(train_index, val_index),\n                   procs=[Categorify])  # &lt;------ add procs!\n\ndls = dl.dataloaders(bs=64)\nprint(dls.show_batch())\nlearn = tabular_learner(dls, metrics=[accuracy])\nlearn.fit_one_cycle(3)\n\n\n\n\n\na\nb\nc\nd\ne\nf\nlabel\n\n\n\n\n0\n2.0\n32.0\n15.0\n15.0\n3.6\n0.8\n0.0\n\n\n1\n3.0\n32.0\n9.0\n15.0\n4.5\n0.7\n0.0\n\n\n2\n2.0\n32.0\n9.0\n14.0\n3.9\n0.5\n1.0\n\n\n3\n2.0\n12.0\n6.0\n-1.0\n4.0\n1.0\n0.0\n\n\n4\n2.0\n12.0\n8.0\n15.0\n3.7\n0.9\n0.0\n\n\n5\n2.0\n12.0\n4.0\n15.0\n3.7\n0.7\n1.0\n\n\n6\n1.0\n12.0\n0.0\n15.0\n4.0\n0.7\n0.0\n\n\n7\n3.0\n12.0\n0.0\n15.0\n3.3\n0.5\n0.0\n\n\n8\n2.0\n12.0\n5.0\n15.0\n4.3\n0.9\n0.0\n\n\n9\n2.0\n12.0\n9.0\n15.0\n4.3\n0.9\n0.0\n\n\n\n\n\nNone\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n0.482110\n0.418015\n0.832246\n00:09\n\n\n1\n0.349364\n0.333562\n0.852591\n00:07\n\n\n2\n0.322106\n0.323014\n0.854511\n00:07\n\n\n\n\n\n\n\n\nWhy did we get this error?\n\nget_emb_sz??\n\n\nSignature: get_emb_sz(to: 'Tabular | TabularPandas', sz_dict: 'dict' = None) -&gt; 'list'\nSource:   \ndef get_emb_sz(\n    to:Tabular|TabularPandas, \n    sz_dict:dict=None # Dictionary of {'class_name' : size, ...} to override default `emb_sz_rule` \n) -&gt; list: # List of embedding sizes for each category\n    \"Get embedding size for each cat_name in `Tabular` or `TabularPandas`, or populate embedding size manually using sz_dict\"\n    return [_one_emb_sz(to.classes, n, sz_dict) for n in to.cat_names]\nFile:      /opt/homebrew/Caskroom/miniforge/base/envs/fastai/lib/python3.11/site-packages/fastai/tabular/model.py\nType:      function\n\n\n\n\nfrom fastai.tabular.model import _one_emb_sz\n_one_emb_sz??\n\n\nSignature: _one_emb_sz(classes, n, sz_dict=None)\nSource:   \ndef _one_emb_sz(classes, n, sz_dict=None):\n    \"Pick an embedding size for `n` depending on `classes` if not given in `sz_dict`.\"\n    sz_dict = ifnone(sz_dict, {})\n    n_cat = len(classes[n])\n    sz = sz_dict.get(n, int(emb_sz_rule(n_cat)))  # rule of thumb\n    return n_cat,sz\nFile:      /opt/homebrew/Caskroom/miniforge/base/envs/fastai/lib/python3.11/site-packages/fastai/tabular/model.py\nType:      function\n\n\n\nWe see that the error is due to get_emb_sz(dls.train_ds, {} if emb_szs is None else emb_szs) line. The get_emb_sz function tries to return [_one_emb_sz(to.classes, n, sz_dict) for n in to.cat_names]. We get error because our dataloaders has no classes attributes .\nHere, classes attributes is what category do we have in each of our categorical columns. In simple_df below, we would declare aa column as categorical feature, with 3 separate classes [1, 2, 3]. The learner doesn‚Äôt know this because we did not specify to Categorify our categorical column when initializing our dataloaders.\n\nsimple_df = pd.DataFrame({'aa': [1, 2, 3, 1], 'bb':[1.1, 2.2, 3.3, 5.0], 'label':[1, 0, 1, 1]})\nsimple_df\n\n\n\n\n\n\n\n\naa\nbb\nlabel\n\n\n\n\n0\n1\n1.1\n1\n\n\n1\n2\n2.2\n0\n\n\n2\n3\n3.3\n1\n\n\n3\n1\n5.0\n1\n\n\n\n\n\n\n\n\n# no classes attributes\n\nTabularPandas(simple_df, \n              cat_names = ['aa'], \n              cont_names = ['bb'],\n              y_names = ['label'],\n              y_block = CategoryBlock(vocab=simple_df[y_names]), \n              splits = ([0,1,2], [3]),\n             ).dataloaders(bs=64).classes\n\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[32], line 7\n      1 TabularPandas(simple_df, \n      2               cat_names = ['aa'], \n      3               cont_names = ['bb'],\n      4               y_names = ['label'],\n      5               y_block = CategoryBlock(vocab=simple_df[y_names]), \n      6               splits = ([0,1,2], [3]),\n----&gt; 7              ).dataloaders(bs=64).classes\n\nFile /opt/homebrew/Caskroom/miniforge/base/envs/fastai/lib/python3.11/site-packages/fastcore/basics.py:507, in GetAttr.__getattr__(self, k)\n    505 if self._component_attr_filter(k):\n    506     attr = getattr(self,self._default,None)\n--&gt; 507     if attr is not None: return getattr(attr,k)\n    508 raise AttributeError(k)\n\nFile /opt/homebrew/Caskroom/miniforge/base/envs/fastai/lib/python3.11/site-packages/fastcore/basics.py:507, in GetAttr.__getattr__(self, k)\n    505 if self._component_attr_filter(k):\n    506     attr = getattr(self,self._default,None)\n--&gt; 507     if attr is not None: return getattr(attr,k)\n    508 raise AttributeError(k)\n\nFile /opt/homebrew/Caskroom/miniforge/base/envs/fastai/lib/python3.11/site-packages/fastcore/basics.py:507, in GetAttr.__getattr__(self, k)\n    505 if self._component_attr_filter(k):\n    506     attr = getattr(self,self._default,None)\n--&gt; 507     if attr is not None: return getattr(attr,k)\n    508 raise AttributeError(k)\n\nFile /opt/homebrew/Caskroom/miniforge/base/envs/fastai/lib/python3.11/site-packages/fastcore/transform.py:212, in Pipeline.__getattr__(self, k)\n--&gt; 212 def __getattr__(self,k): return gather_attrs(self, k, 'fs')\n\nFile /opt/homebrew/Caskroom/miniforge/base/envs/fastai/lib/python3.11/site-packages/fastcore/transform.py:173, in gather_attrs(o, k, nm)\n    171 att = getattr(o,nm)\n    172 res = [t for t in att.attrgot(k) if t is not None]\n--&gt; 173 if not res: raise AttributeError(k)\n    174 return res[0] if len(res)==1 else L(res)\n\nAttributeError: classes\n\n\n\n\n# now we have classes attributes\n\nTabularPandas(simple_df, \n              cat_names = ['aa'], \n              cont_names = ['bb'],\n              y_names = ['label'],\n              y_block = CategoryBlock(vocab=simple_df[y_names]), \n              splits = ([0,1,2], [3]),\n              procs = [Categorify]\n             ).dataloaders(bs=64).classes\n\n{'aa': ['#na#', 1, 2, 3]}\n\n\nThat‚Äôs all for now, bye!"
  },
  {
    "objectID": "til/200624_incompleteread.html",
    "href": "til/200624_incompleteread.html",
    "title": "IncompleteRead When Downloading From ü™£ AWS S3",
    "section": "",
    "text": "Set keep alive connection to avoid IncompleteRead that is due to connection error\n\n\n\n\nimage.png\n\n\nMy challenge today was figuring out why my code could not run. I got IncompleteRead error when trying to load data from AWS S3. The file is only 400 MB. I tried multiple solutions from github issues to stackoverflow answers. The only workaround that worked for me was setting these in terminal:\n\nsudo sysctl net.inet.tcp.keepintvl=200000\nsudo sysctl net.inet.tcp.keepidle=200000\nsudo sysctl net.inet.tcp.keepinit=200000\nsudo sysctl net.inet.tcp.always_keepalive=1\n\nAnd run again, and again. Now, my code doesn‚Äôt exit out anymore and I still don‚Äôt know why üòÖ\nSome useful references: 1. https://docs.aws.amazon.com/redshift/latest/mgmt/connecting-firewall-guidance.html 2. https://github.com/boto/boto3/issues/2424"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "React Crash Course Part 1/3\n\n\n5 min\n\n\n\n\n\n\nNov 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReact Crash Course Part 3/3\n\n\n3 min\n\n\n\n\n\n\nNov 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nReact Crash Course Part 2/3\n\n\n8 min\n\n\n\n\n\n\nNov 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nNPM Cheatsheet\n\n\n6 min\n\n\n\n\n\n\nNov 18, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nFront-end Web Dev Crash Course Part 3/4\n\n\n16 min\n\n\n\n\n\n\nNov 15, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nFront-end Web Dev Crash Course Part 1/4\n\n\n29 min\n\n\n\n\n\n\nNov 15, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nFront-end Web Dev Crash Course Part 4/4\n\n\n15 min\n\n\n\n\n\n\nNov 15, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nFront-end Web Dev Crash Course Part 2/4\n\n\n42 min\n\n\n\n\n\n\nNov 15, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nBurrows-Wheeler Transform in Python\n\n\n3 min\n\n\n\n\n\n\nNov 6, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSuffix Array\n\n\n1 min\n\n\n\n\n\n\nNov 6, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nDifferences between: PAM vs BLOSUM\n\n\n1 min\n\n\n\n\n\n\nOct 9, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nSmith-Waterman Local Alignment using Python\n\n\n1 min\n\n\n\n\n\n\nSep 16, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nCondensed A/B Test Summary\n\n\n1 min\n\n\n\n\n\n\nSep 10, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nExtract data from GEO2R\n\n\n2 min\n\n\n\n\n\n\nAug 31, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nNeural Network from scratch using Excel\n\n\n6 min\n\n\n\n\n\n\nJun 26, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nVisualizing Arrays using Excel\n\n\n4 min\n\n\n\n\n\n\nJun 23, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Hi and welcome to my site!\nI‚Äôm Siti Sarah Amirah, a data scientist passionate about automating processes. I am currently focusing on ML use-cases to automate subscription services within my organization. Previously, I worked as a fraud investigation analyst within the e-commerce sector. I‚Äôm dedicated to continual learning and self-improvement."
  },
  {
    "objectID": "blog/npm_cheatsheet.html",
    "href": "blog/npm_cheatsheet.html",
    "title": "NPM Cheatsheet",
    "section": "",
    "text": "1. Run npm -v in terminal."
  },
  {
    "objectID": "blog/npm_cheatsheet.html#to-uninstall-regular-dependencies",
    "href": "blog/npm_cheatsheet.html#to-uninstall-regular-dependencies",
    "title": "NPM Cheatsheet",
    "section": "To uninstall regular dependencies",
    "text": "To uninstall regular dependencies\n\nUse npm uninstall {module name} --save\nThe module will then be deleted from .node_modules folder. --save flag make sure the module we‚Äôve uninstalled will then be removed from dependencies in package.json."
  },
  {
    "objectID": "blog/npm_cheatsheet.html#to-uninstall-dev-dependencies",
    "href": "blog/npm_cheatsheet.html#to-uninstall-dev-dependencies",
    "title": "NPM Cheatsheet",
    "section": "To uninstall dev dependencies",
    "text": "To uninstall dev dependencies\n\nUse npm uninstall {module name} --save-dev\nThe module will then be deleted from .node_modules folder. --save flag make sure the module we‚Äôve uninstalled will then be removed from devDependencies in package.json.\n\nBefore:   After: \nNote: instead of the keyword uninstall, we can also use one of remove rm un."
  },
  {
    "objectID": "blog/react_crash_course_part1.html",
    "href": "blog/react_crash_course_part1.html",
    "title": "React Crash Course Part 1/3",
    "section": "",
    "text": "This is part 1/3 notes of a Youtube react crash course."
  },
  {
    "objectID": "blog/react_crash_course_part1.html#what-is-react",
    "href": "blog/react_crash_course_part1.html#what-is-react",
    "title": "React Crash Course Part 1/3",
    "section": "What is react?",
    "text": "What is react?\n\nJS library for building user interfaces.\nWebsites/UIs are looked at in terms of components.\nReact is a UI library, not a framework to be specific.\n\nA framework provides complete solution eg Angular ‚Äì provides route, http client, state management library and much more.\nReact is often referred to as a framework because it operates like one, and is in direct competition with frameworks like angular.\nReact is the most popular out of the major front-end frameworks (react, vue,js, angular, spelt).\nOften used with other libraries eg react router to create a full featured solution.\n\nThe ecosystem of react is huge so it can be used for a wide variety of applications such as single page apps, server side rendered applications and static websites."
  },
  {
    "objectID": "blog/react_crash_course_part1.html#why-react",
    "href": "blog/react_crash_course_part1.html#why-react",
    "title": "React Crash Course Part 1/3",
    "section": "Why react?",
    "text": "Why react?\n\nBack in the days, the web is pretty static, you would click on a link, then it will take you to another page, then another page would be refreshed. Then came along Ajex, this allows is to get data from the server without having to refresh the page and this is a game-changer in terms of user interfaces.\nThis allows us to build single page applications where we can build very dynamic user experience.\nAs this type of application and interface grows, it becomes very hard to maintain ‚Äì this is where react and front-end frameworks come in ‚Äì it allows us to build dynamic UI that is easy to maintain and scale.\nReact uses virtual DOM (Document Object Model) ‚Äì a lightweight copy of the actual DOM. When the state of a component changes, the virtual DOM changes first, then react will compare the 2 (the virtual DOM and the actual DOM) and it will update the parts that needed to be updated."
  },
  {
    "objectID": "blog/react_crash_course_part1.html#components",
    "href": "blog/react_crash_course_part1.html#components",
    "title": "React Crash Course Part 1/3",
    "section": "Components",
    "text": "Components\n\nCore concept of any frontend framework\nReusable piece of code that can be used to build components on a page. Can be thought of as custom HTML elements.\nComponents can be broken down into smaller ones - called composition. This is a great way to built UI because it allow you to break down complex interfaces into smaller more managable pieces ‚Äì makes your code easy to maintain and scale.\nComponents can be either classes (older way) or functions.\nComponents can take in props ‚Äì this is like arguments or attributes.\nComponents can hold their own state or their own data.\nThe output of a component is a JSX (Javascript Syntax Extension) ‚Äì this is HTML-like syntax within Javascript. This is what gets returned from a react component.\n\n\n\n\nimage.png"
  },
  {
    "objectID": "blog/react_crash_course_part1.html#state",
    "href": "blog/react_crash_course_part1.html#state",
    "title": "React Crash Course Part 1/3",
    "section": "State",
    "text": "State\n\nState represents data that a component manages internally.\nAllows component to store and manage their own data which can change over time ‚Äì will change based on user interaction or other factors.\nState is typically used for data that is expected to change - eg user input, to fetch data from API, or UI related data like whether a model is open or closed.\nTo define state in a functional component, you can use a hook.\nGlobal state ‚Äì relates to the app as a whole, and not just a single component. Eg data that you fetch from your database, you probably want to share this will multiple components.\nWe can also use 3rd party state management system like Redux."
  },
  {
    "objectID": "blog/react_crash_course_part1.html#hooks",
    "href": "blog/react_crash_course_part1.html#hooks",
    "title": "React Crash Course Part 1/3",
    "section": "Hooks",
    "text": "Hooks\n\nFunctions that enable functional components to use state and other react features without writing a class.\nReact components used to be classes and these classes has life cycle methods - methods that ran at specific time during the component rendering process.\nFunctional components don‚Äôt have life cycle methods because they are not class ‚Äì and hooks allows us to do the same stuff we could do within class components such as set state etc.\nTwo main hooks we need to know right now are: useState, useEffect.\nAll hooks starts with the word use.\nWe can also create custom hooks to use within our own components."
  },
  {
    "objectID": "blog/react_crash_course_part1.html#spa-ssr-ssg",
    "href": "blog/react_crash_course_part1.html#spa-ssr-ssg",
    "title": "React Crash Course Part 1/3",
    "section": "SPA, SSR, SSG",
    "text": "SPA, SSR, SSG\n\nSingle Page App\n\nLoad a single HTML file and JavaScript loads the entire UI including routes.\nThis is what this framework was initially built for.\nAllows our interface to be very interactive.\nWhen we click a link, it doesn‚Äôt load that page, but the Javascript is loading that page for you.\nGood for fast, dynamic interfaces but can have some issues when it come to initial page load time, and SEO because the content comes from Javascript. The solution for this is to create a server side rendered app whcih you can do with a framework like next.js or remix.\n\nThese frameworks they still use react ‚Äì you can think of it like a wrapper around react. But instead of everything being bundled in the Javascript, the initial page load is rendered on a server so it is good for SEO and good for the initial page load time.\n\nYou can deploy to any type of host.\n\nServer-Side Rendered\n\nServer sends fully rendered page to client. You can fetch data and load it as well.\nThis is more difficult to deploy because you need a server. Typically would use something like versel, netlify.\n\nStatic Site Generation\n\nFrameworks generates static HTML files at build time. These are very fast.\nEg frameworks like Gatsby, Astro (these frameworks also use react)"
  },
  {
    "objectID": "blog/react_crash_course_part1.html#vite",
    "href": "blog/react_crash_course_part1.html#vite",
    "title": "React Crash Course Part 1/3",
    "section": "Vite",
    "text": "Vite\n\nVite is a super fast frontend toolkit that can be used for all kinds of JS projects including React.\nIt is build on top of ESBuild, which is a very fast JS bundler.\nHas built-in development server with hot-reload."
  },
  {
    "objectID": "blog/react_crash_course_part1.html#reference",
    "href": "blog/react_crash_course_part1.html#reference",
    "title": "React Crash Course Part 1/3",
    "section": "Reference",
    "text": "Reference\n\nReact Documentation"
  },
  {
    "objectID": "blog/frontend_crash_course_part1.html",
    "href": "blog/frontend_crash_course_part1.html",
    "title": "Front-end Web Dev Crash Course Part 1/4",
    "section": "",
    "text": "This is part 1/4 notes of a Youtube Front-end web development crash course."
  },
  {
    "objectID": "blog/frontend_crash_course_part1.html#change-webpage-element-using-inspector-tool",
    "href": "blog/frontend_crash_course_part1.html#change-webpage-element-using-inspector-tool",
    "title": "Front-end Web Dev Crash Course Part 1/4",
    "section": "Change webpage element using Inspector tool",
    "text": "Change webpage element using Inspector tool\n\nStep 1: Open the inspect tool by right-click ‚Üí inspect on any webpage.\nStep 2: Select the cursor symbol (top most red arrow) to pick element on the webpage.\nStep 3: Pick the element we want to get the code for. Here, we click on the ‚ÄúGoogle‚Äù logo and the corresponding HTML code for the Google logo is then highlighted on the right-hand side panel.\nStep 4: To change the Google logo, we have to update its srcset attribute. We can also change the width and the height attributes. Note that we may need to uncheck some elements (specifically object-fit: contain; and width: auto;) in the styles tab (bottom right most rectangle) for the changes in width and height to take effect on the webpage.\n\n\n\n\nimage.png\n\n\nHere we inserted a picture of a pizza (right click the picture we want to insert ‚Üí Copy Image Link) in place of the ‚ÄúGoogle‚Äù logo. We also adjusted the width and height.\n\n\n\nimage.png"
  },
  {
    "objectID": "blog/frontend_crash_course_part1.html#change-webpage-element-on-console-tab",
    "href": "blog/frontend_crash_course_part1.html#change-webpage-element-on-console-tab",
    "title": "Front-end Web Dev Crash Course Part 1/4",
    "section": "Change webpage element on Console tab",
    "text": "Change webpage element on Console tab\nThe console tab allows you to: - write Javascript on the code editor - modify the document object model (dom)\nTo modify the ‚ÄúGoogle‚Äù logo using Console tab:\n\nStep 1: Click on the Console tab (top most arrow)\nStep 2: Write Javascript in the editor (left most rectangle). In the code snippet we added here:\n\nline 1: const ourImage = ... means we are selecting the HTML element with object tag img and save it in a variable called ourImage\nline 2: we just print our ourImage to see what gets saved.\n\nStep 3: When we click ‚ñ∑ Run, the result is shown in the right most panel. Noticed that the same HTML portion that we edited earlier using the Inspector tool is shown here.\n\n\n\n\nimage.png\n\n\n\n// pick html element with &lt;img&gt; tag and save it in ourImage variable\nconst ourImage = document.querySelector('img')\n\n// save url of the picture we want to paste in newURL variable\nconst newURL = 'https://food.fnr.sndimg.com/content/dam/images/food/fullset/2016/8/23/0/FNM_100116-Classic-Crust_s4x3.jpg.rend.hgtvcom.1280.960.suffix/1480972867043.webp'\n\n// change srcset attribute to newURL\nourImage.setAttribute('srcset', newURL)\n\n// change width\nourImage.setAttribute('width', 300)\n\n\n\n\nimage.png\n\n\n\n// creating a function to change the google logo\nfunction changeImage(url){\n    document.querySelector('img').setAttribute('srcset', url)\n}\n\n// call the function\nchangeImage(newURL)\n\n\n\n\nimage.png"
  },
  {
    "objectID": "blog/frontend_crash_course_part1.html#event-listener-to-change-background-color-on-click",
    "href": "blog/frontend_crash_course_part1.html#event-listener-to-change-background-color-on-click",
    "title": "Front-end Web Dev Crash Course Part 1/4",
    "section": "Event listener to change background color on click",
    "text": "Event listener to change background color on click\nNow, we want to write a program that could change the background color to a random color every time a user click on the webpage.\nWe could do this manually on the Inspector tool by (1) select the &lt;body&gt; container (top rectangle). (2) change the background: #fff to whatever color we want (bottom arrow).\n\n\n\nimage.png\n\n\nTo trigger the background change every time a user click, we have to write the code below in the Console tab and run. Now, every time a user clicks on the webpage, the htmlBody.onClick event listener will run the randomClickFunction we defined and print out some messages to the console log.\n\n\n\nimage.png\n\n\n\n// save Body container\nconst htmlBody = document.querySelector('body');\n\n// define and save the function to a variable\nconst randomClickFunction = function () {\n  // save array of colors\n  const colors = [\"#002942\", \"#0CA708\", \"red\", \"blue\", \"green\", \"yellow\", \"purple\"];\n\n  // get random index\n  const randomIndex = Math.floor(Math.random() * colors.length);\n  \n  // get the color at the random index\n  const randomColor = colors[randomIndex];\n  \n  // change the background color\n  htmlBody.style.backgroundColor = randomColor;\n\n  // print message to console\n  console.log('The user clicked and set the color to ' + randomColor);\n}\n\n// to run the function\n// randomClickFunction()\n\n// add event listener =&gt; every time user click on this webpage, it will run the function we created\nhtmlBody.onclick = randomClickFunction;"
  },
  {
    "objectID": "blog/frontend_crash_course_part1.html#references",
    "href": "blog/frontend_crash_course_part1.html#references",
    "title": "Front-end Web Dev Crash Course Part 1/4",
    "section": "References",
    "text": "References\n\nPodcast/Browser wars: Podcast series on topics about different browser runtimes."
  },
  {
    "objectID": "blog/frontend_crash_course_part1.html#notes-on-syntax",
    "href": "blog/frontend_crash_course_part1.html#notes-on-syntax",
    "title": "Front-end Web Dev Crash Course Part 1/4",
    "section": "Notes on syntax",
    "text": "Notes on syntax\n\nWe can print something using console.log() statement. This is built in to Javascript, so we can use it in both node.js and browser runtime.\nSingle line comment is written using 2 forward slash//.\nMultiple line comments is written between /* ‚Ä¶ */.\nSemicolon ; indicates the end of an expression. ``` // good example const oneVar = 20; const secondVar = 30;\n// bad example (missing ;) const oneVar = 20 const secondVar = 30; ```\nJust like python, we can use single quotation '' or double quotation \"\" to write string.\n\nBut the community convention (and many code linters) converge towards single quotations.\n\nBoolean values are all lowercase true or false.\n\n\n// quick examples of declaring various data types\nconst yourFirstVariable = 'learning to code gives you superpower';\nconst yourSecondVariable = 10;\nconst yourThirdVariable = {firstProperty: 'hello world'};"
  },
  {
    "objectID": "blog/frontend_crash_course_part1.html#var-vs-let-vs-const",
    "href": "blog/frontend_crash_course_part1.html#var-vs-let-vs-const",
    "title": "Front-end Web Dev Crash Course Part 1/4",
    "section": "var vs let vs const",
    "text": "var vs let vs const\n\nWhen we create a variable, we need to first declare the variable then assign it. But we can also break it down in multiple steps.\n\nEg1 declare and assign it in one go: const myvar = 'hello world'\nEg2 declare and assign variables in 2 steps:\n\nlet anotherVar; declare a variable\nanotherVar = 20; assign the variable\n\n\nYou can use at least one of these keywords [const, let, var] when creating variables. const variable1 = 10;     let variable2 = 10;     var variable3 = 10;\n\nvar keyword: should be against using it, because it can be redeclared. This is used in old legacy version of Javascript. Eg when we do:\n\nvar myvariable = 10;\nvar myvariable = 20;\n\n// this will redeclare the variable `myvariable` from storing the value of 10 to storing the value of 20. And it will not give us any error. Compared to when we do this using `const` keyword.\n\nconst anotherVariable = 10;\nconst anotherVariable = 20;\n\n// this will give us `Uncaught SyntaxError: redeclaration of const anotherVariable`\n  - using the `var` keyword it may be useful when we want to redeclare variables especially when we are using console. But when you're actually writing code, it can be dangerous to be able to redeclare vaiables.\n\nlet keyword: we use this when we expect to reassign a variable at some point in your code.\n\nNote that redeclaring != reassigning.\n\nDeclaring a variable allocates a memory space for that variable we are declaring.\nAssigning a variable is where we save an actual value in the space we‚Äôve declared. When we reassign variable, we replace the stored value to a new value we want to save in the same memory slot. ``` let counter = 0;\n\n\n// reassigning the value of the variable counter counter = counter + 1;\n// reassigning the value of the variable counter (same as the previous line ‚Äì adds 1 to counter) counter++; ```\nconst keyword: can not reassign a new value to a constant variable. We should use const when we expect the value will never change.\n\nconst counter = 0;\n\n// this will give us `Uncaught TypeError: invalid assignment to const `counter`\ncounter++;"
  },
  {
    "objectID": "blog/frontend_crash_course_part1.html#variable-naming-conventions",
    "href": "blog/frontend_crash_course_part1.html#variable-naming-conventions",
    "title": "Front-end Web Dev Crash Course Part 1/4",
    "section": "Variable naming conventions",
    "text": "Variable naming conventions\n\nAll the below lines are valid in Javascript. They are all written slightly differently, so Javascript recognizes them as different variables that‚Äôs why we are allowed to declare all of these at once.\n\nConventionally, there are some of these writing styles that are more preferable in the Javascript programming language than others.\nWritting styles indicate to other programmers something about your code.\nThere are various style guides out there: Google JavaScript style guide, Airbnb JavaScript style guide.\n\nThese are like specifications on how the companies want their employees to write their Javascript code. This might entails different naming conventions, different use cases of Javascript features etc.\n\n// written in camel case -- generally recommended\nconst yourFirstVariable = 10;\n\n// written in snake case\nconst your_first_variable = 10;\n\n// written in constant case\nconst YOUR_FIRST_VARIABLE = 10;\n\n// written in all lowercases\nconst yourfirstvariable = 10;\n\n// written in Pascal case\nconst YourFirstVariable = 10;\n\nWhen naming variable, be descriptive but keep it short."
  },
  {
    "objectID": "blog/frontend_crash_course_part1.html#data-types",
    "href": "blog/frontend_crash_course_part1.html#data-types",
    "title": "Front-end Web Dev Crash Course Part 1/4",
    "section": "Data types",
    "text": "Data types\n\nQuick overview of different data types: ``` // storing a number const variable1 = 10;\n// storing another variable const variable2 = variable1;\n// storing a string const variable3 = ‚ÄòZach‚Äô;\n// storing an object const variable4 = { variableType: ‚Äúobject‚Äù, variableValue: ‚Äúsome value‚Äù, };\n// storing immediately invoked function const variable5 = (function() { return ‚ÄúHello, my name is‚Äù; })();\n// storing a combination of variables const variable6 = variable5 + variable3; console.log(variable6); // [output] Hello, my name is Zach\n// storing a boolean const variable7 = false; ```\nWe don‚Äôt need to specify what type of data type that we want to store in the variable when we declare variable unlike in statically typed language (eg Typescript, C, C++, Java) where we need to specify the data type.\n\nEg how we would declare a variable in TypeScript (a superset of Javascript, it is a language that is transpiled down into Javascript and allows for type checking): const variable1: number = 10;\n\nHere we are declaring a new variable called variable1 and specifying it is of data type number and assigning the value 10 to store in the new variable.\n\nJavascript is called a dynamically typed language, where the compiler will have no clue what data type a variable will store until it actually evaluates the data type of the value you‚Äôre assigning to it.\nWe can check data type of variable by: typeof variable1;.\nWe need to be aware of the data types of our variables so we don‚Äôt do something that would trigger implicit coercion of variable type. Eg the below example coerced variable1 which is of type number into type string and concatenated together with the value of variable2.\n\nconst variable1 = 10;\nconst variable2 = 'some text';\n\nvariable1 + variable2;\n// [output] \"10some value\"\nTo explicitly coerce different data type, eg: ``` const number1 = ‚Äò10‚Äô; const number2 = 20;\n// explict coercion of number1 variable Number(number1) + number2; // [output] 30\n// implicit coercion of number2 variable number1 + number2; // [output] ‚Äú1020‚Äù ```\nEverything is an object in Javascript.\n\n\nArrays\n\nThink of it as a list. You can put in any data type you want. const firstArray = [10, 20, 30, 40];     const secondArray = [10, 'a string', {prop: 'hello'}, [1,2]];\nAll elements are indexed. Index start at 0. Use the index to retrieve the element: ``` console.log(secondArray[3]) // [Output] [1,2]\nconsole.log(secondArray[3][0]) // [Ouptut] 1 ```\n\n\n\nObjects\n\nHashmap to store key value pair.\nTo create an object. Notice that we did not write the key as string ‚Äì this is different with python. const objectVariable = {prop1: 20, prop2: 50};\nWe use dot notation to access the value stored in the object. Or using brackets, note that if we access key value using brackets, we need to write the key as string. ``` objectVariable.prop1 // [Output] 20\nobjectVariable[‚Äòprop1‚Äô] // [Output] 20 ```\nCan be nested. Eg: ``` const nestedObject = { layer1: { layer2: { layer3: { targetValue: 20 } } } }\n// to retrieve the targetValue property nestedObject.layer1.layer2.layer3.targetValue // [Output] 20 ```\n\n\n\nFunctions\n\nFunctions are valid things you can assign into a variable.\nTo create a function ``` // define function and assign the function to a variable const functionContainerVariable = function(){ return 20; }\n// call the function functionContainerVariable() // [Output] 20 ```\n\n\n\nNaN\n\nWe get this if we are trying to do math operation on a alphabet string. const myString = 'some string';     console.log(Number('30')); // 30     console.log(Number(myString)); // NaN     console.log(Number(myString) + 2); // NaN     console.log(myString / 2); // NaN     console.log(myString * 2); // NaN     console.log(myString - 2); // NaN\n\n\n\nNull\n\nPrimitive data type.\nNull is a falsy value.\nlet num = null;\n\nif (num){\n  console.log('this will not be reached because num is evaluated to false');\n} else {\n  console.log('this will be reached');\n}\n// [Output] this will be reached\n\n\n\nUndefined\n\nPrimitive data type.\nAny variable with no value assigned is of undefined data type.\nUndefined is a falsy value. ``` // notice we declared myvar but did not assign any value let myvar;\nconsole.log(myvar) // [Output] undefined\nconsole.log(typeof(myvar)) // [Output] undefined\nif (myvar) { console.log(‚Äòthis will not be reached because myvar is evaluated as false‚Äô); } else { console.log(‚Äòthis will be reached‚Äô); } // [Output] this will be reached ```"
  },
  {
    "objectID": "blog/frontend_crash_course_part1.html#excercise",
    "href": "blog/frontend_crash_course_part1.html#excercise",
    "title": "Front-end Web Dev Crash Course Part 1/4",
    "section": "Excercise",
    "text": "Excercise\n\nChallenge 1:\n\n\n\n\nimage.png\n\n\n\nChallenge 2:\n ``//someandNumber` here is not a single word, so it throws error. Name of variable need to be 1 word. const some Number = 20;\n// It seems like we are trying to reassign to a constant variable here, which we can not do someNumber = 50 ```\n\nAnswer:\n\n// the name of a variable needs to be 1 word\nlet someNumber = 20;\n\n// we should use `let` when declaring a variable that we want to reassign later\nsomeNumber = 50;\nChallenge 3:\n\n\n\nimage-4.png\n\n\n\nAnswer: resultVariable stores the value ‚Äò2040‚Äô. It is of string data type.\n\nChallenge 4:\n\n\n\nimage-2.png\n\n\nChallenge 5:\n\n\n\nimage-3.png"
  },
  {
    "objectID": "blog/frontend_crash_course_part1.html#references-1",
    "href": "blog/frontend_crash_course_part1.html#references-1",
    "title": "Front-end Web Dev Crash Course Part 1/4",
    "section": "References",
    "text": "References\n\nGithub/You-Dont-Know-JS: A book series on Javascript to know how Javascript works under the hood."
  },
  {
    "objectID": "blog/frontend_crash_course_part1.html#arithmetic-operators",
    "href": "blog/frontend_crash_course_part1.html#arithmetic-operators",
    "title": "Front-end Web Dev Crash Course Part 1/4",
    "section": "Arithmetic operators",
    "text": "Arithmetic operators\n\n+ - * / % ** ++ --\nexponent: **\nincrement by 1: ++\ndecrement by 1: --"
  },
  {
    "objectID": "blog/frontend_crash_course_part1.html#assignment-operators",
    "href": "blog/frontend_crash_course_part1.html#assignment-operators",
    "title": "Front-end Web Dev Crash Course Part 1/4",
    "section": "Assignment operators",
    "text": "Assignment operators\n\n= += -= *= /=\nbetter to just write the full code."
  },
  {
    "objectID": "blog/frontend_crash_course_part1.html#comparison-operators",
    "href": "blog/frontend_crash_course_part1.html#comparison-operators",
    "title": "Front-end Web Dev Crash Course Part 1/4",
    "section": "Comparison operators",
    "text": "Comparison operators\n\n== === != !== &gt; &lt; &gt;= &lt;=\ncheck comparison in both value and type: ===, !==\ncheck comparison in value: ==, !=\nWe can not compare arrays and objects using comparison operator as shown in the example below. Workaround is to use a library called Lodash. ``` const myArray = [1,2,3]; const anotherArray = [1,2,3];\nmyArray === myArray // [Output] true myArray == myArray // [Output] true\nmyArray === anotherArray; // [Output] false // intuition = because it is not the same object myArray == anotherArray; // [Output] false // not comparing the same object\nconst myObj = {property1: ‚Äòsome value‚Äô, property2: 20} const anotherObj = {property1: ‚Äòsome value‚Äô, property2: 20}\nmyObj === myObj // [Output] true // comparing the same object myObj == myObj // [Output] true // comparing the same object\nmyObj === anotherObj // [Output] false // not comparing the same object myObj == anotherObj // [Output] false // not comparing the same object ```"
  },
  {
    "objectID": "blog/frontend_crash_course_part1.html#ternary-operator",
    "href": "blog/frontend_crash_course_part1.html#ternary-operator",
    "title": "Front-end Web Dev Crash Course Part 1/4",
    "section": "Ternary operator",
    "text": "Ternary operator\n\nconditional operators with if else statement.\n\nconst result = 20 === 20? 'values match' : 'values do not match';\nconsole.log(result)\n// [Output] \"values match\"\n\n// this is equivalent to the below code\nlet result;\nif (20 === 20){\n    result = 'values match';\n}else{\n    result = 'values do not match';\n}\n// [Output] \"values match\""
  },
  {
    "objectID": "blog/frontend_crash_course_part1.html#logical-operator",
    "href": "blog/frontend_crash_course_part1.html#logical-operator",
    "title": "Front-end Web Dev Crash Course Part 1/4",
    "section": "Logical operator",
    "text": "Logical operator\n\n&& || !\nlogical and: && ``` 20 === 20 && 10 === 10 // [Output] true\n20 === 20 && 10 === 12 // [Output] false ```\nlogical or: ||\nlogical not: ! !(20 === 20) // similar to: not(true)     // [Output] false"
  },
  {
    "objectID": "blog/frontend_crash_course_part1.html#exercies",
    "href": "blog/frontend_crash_course_part1.html#exercies",
    "title": "Front-end Web Dev Crash Course Part 1/4",
    "section": "Exercies",
    "text": "Exercies\n\nChallenge 1: we can not reassign values to a const variable.\nChallenge 2: Yes, both code evaluated to false. \nChallenge 3: expression5 evaluated to false.\n\nconst expression5 = !(((100 % 50) &lt; (100 / 50)) && (300 + 5 === 305))\n\nChallenge 4: result is true.\nChallenge 5: result is true.\n\n\nReference\n\nLodash: Javascript library used to comparing arrays and onjects."
  },
  {
    "objectID": "blog/frontend_crash_course_part1.html#conditionals",
    "href": "blog/frontend_crash_course_part1.html#conditionals",
    "title": "Front-end Web Dev Crash Course Part 1/4",
    "section": "Conditionals",
    "text": "Conditionals\n\nif structure: if (condition) {run if true}\nif - else structure: if (condition) {run if true} else {run if false} Eg. if ('some string' === 'another string'){         console.log('the strings are equal');     } else {         console.lof('the strings are equal');     }\nif - else if - else: if (condition1) {run if condition1 is true} else if (condition2) {run if condition2 is true} else {run if condition1 and condition2 is not true} if (20 &gt; 10){         console.log('condition1 is true')     } else if (10 &lt; 5) {         console.log('condition2 is true')     } else {         console.log('condition1 and condition2 are false')     }\nif - else if - else if - else if ‚Ä¶ - else: ``` if (condition1) { // run if condition1 is true\n} else if (condition2) { // run if condition2 is true\n} else if (condition3) { // run if condition3 is true\n} else if (condition4) { // run if condition4 is true\n} else { // run if all is false\n} ```\nswitch case statement: ``` switch (expression) { case x: // run if x is true break;\n  case y:\n  // run if y is true\n  break;\n\n  default:\n  // code block if no case above is found\n} ```"
  },
  {
    "objectID": "blog/frontend_crash_course_part1.html#loop",
    "href": "blog/frontend_crash_course_part1.html#loop",
    "title": "Front-end Web Dev Crash Course Part 1/4",
    "section": "Loop",
    "text": "Loop\n\nfor loop basic structure: for (let i = 0; i &lt; x; i++){         // do something     }"
  },
  {
    "objectID": "blog/frontend_crash_course_part1.html#functions-1",
    "href": "blog/frontend_crash_course_part1.html#functions-1",
    "title": "Front-end Web Dev Crash Course Part 1/4",
    "section": "Functions",
    "text": "Functions\n\nDeclaring function: function myFunction() {         console.log('hello world, this is my first function');     }\nCall function: ``` myFunction();\n// [Output] ‚Äúhello world, this is my first function‚Äù ```\nImmediately invoked function ``` (function anotherFunction(){ console.log(‚Äòhello‚Äô); })();\n// [Output] ‚Äúhello‚Äù ```\nFunction with parameters: ``` function myFunction(param1, param2) { console.log(param1); console.log(param2); }\nmyFunction(100, 200); // [Output] 100 // 200 ```\nAnonymous function (function without a name): ``` // notice we did not give the function a name const anotherFunction = function () { console.log(‚Äòjust another function;‚Äô); }\n// call function anotherFunction(); // [Output] ‚Äújust another function‚Äù ```\nArrow function: basic syntax const myvariable = () =&gt; { // code to run} ``` const arrowFunction = () =&gt; { console.lof(‚Äòi am an arrow function‚Äô); }\n// to call arrowFunction(); // [Output] ‚Äúi am an arrow function‚Äù ```\nReturn values from function ```\n// ‚Äî- FUNCTION WITHOUT RETURN VALUE ‚Äî- // declaring function and save in a variable called myFunction const myFunction = () =&gt; { console.log(‚Äòprinting something‚Äô) }\n// saving the return value of myFunction() into result variable const result = myFunction(); // [Output] ‚Äúprinting something‚Äù // because we called the function\n// if we try to print result variable, it will not return anything because myFunction() does not return anything console.log(result)\n// ‚Äî- FUNCTION WITH RETURN VALUE ‚Äî- const myFunction = () =&gt; { const a = 20; return a; }\n// saving the return value of myFunction() into result variable const result = myFunction();\n// printing value stored in result variable console.log(result) // [Output] 20\n```\nRun a function using an alias: ``` // ‚Äî- run a function directly ‚Äî- function myFunction() { return 20; }\nconsole.log(myFunction()); // [Output] 20\n// ‚Äî- run a function using another variable ‚Äî- const aliasVariable = myFunction; console.log(aliasVariable()); // [Output] 20\n// ‚Äî- run a function using another object ‚Äî- const myObj = { prop1: 40, prop2: myFunction }\nconsole.log(myObj.prop2()); // [Output] 20 ```"
  },
  {
    "objectID": "blog/frontend_crash_course_part1.html#references-2",
    "href": "blog/frontend_crash_course_part1.html#references-2",
    "title": "Front-end Web Dev Crash Course Part 1/4",
    "section": "References",
    "text": "References\n\nTutorialspoint/Javascript built-in functions"
  },
  {
    "objectID": "blog/ab_test.html",
    "href": "blog/ab_test.html",
    "title": "Condensed A/B Test Summary",
    "section": "",
    "text": "Condensed summary of A/B Test course by Data36. You can download the mind map here.\n\n\nfrom IPython.display import display, HTML\n\ndisplay(HTML('&lt;iframe style=\"width:100%;height:1500px;border: 1px solid #d0d0d0;border-radius: 6px;\" src=\"https://www.mindomo.com/mindmap/ab-test-c8a1fbd9f65e4b16be9d1060bee2d88e\" frameborder=\"0\" allowfullscreen&gt;Your browser does not support frames. &lt;a href=\"https://www.mindomo.com/mindmap/ab-test-c8a1fbd9f65e4b16be9d1060bee2d88e\" target=\"_blank\"&gt;View&lt;/a&gt; this map on its original site. It was created using &lt;a href=\"https://www.mindomo.com\" target=\"_blank\"&gt;Mindomo&lt;/a&gt;.&lt;/iframe&gt;'));\n\nYour browser does not support frames. &lt;a href=\"https://www.mindomo.com/mindmap/ab-test-c8a1fbd9f65e4b16be9d1060bee2d88e\" target=\"_blank\"&gt;View&lt;/a&gt; this map on its original site. It was created using &lt;a href=\"https://www.mindomo.com\" target=\"_blank\"&gt;Mindomo&lt;/a&gt;.\n\n\n\nReference & credit:\n\nData36: A/B Testing Course (Full Online Course) playlist"
  },
  {
    "objectID": "blog/react_crash_course_part3.html",
    "href": "blog/react_crash_course_part3.html",
    "title": "React Crash Course Part 3/3",
    "section": "",
    "text": "This is part 3/3 notes of a Youtube react crash course."
  },
  {
    "objectID": "blog/react_crash_course_part3.html#data-fetching",
    "href": "blog/react_crash_course_part3.html#data-fetching",
    "title": "React Crash Course Part 3/3",
    "section": "Data Fetching",
    "text": "Data Fetching\n\nReact Suspense: another way to fetch data. This is included with React. Suspense allow you to render while fetching, and you provide a fallback UI (eg spinner, or loading bar etc) as a prop (attribute).\nWhat we‚Äôre doing in the project is fetch on render, because when it renders, it has side effect of fetching the data.\nThere are also other third party libraries we can use to fetch data, eg React query and SWR. It is easier to fetch data using these third party libraries, but the method we did in this tutorial (using useState and useEffect is the most basic way to fetch data from client side component).\nThere are so many different ways to do the same exact things in React, so just choose what works for you.\nWe can also use data loader from react-router to fetch data. Using data loader, we create a function in a component file then export the function from the file and use the function in other areas (basically as our global state for whatever the job is and pass it into other components).\nThis is how to get data using useEffects hook: \nAnother way to get data is to use react-router‚Äôs data loaders, we can do this without having to use useEffects. We can also export the data from this component so we can use it in other components as well. Below is another way to achieve the same thing using useDataLoader hook. \nThere are many ways we can work with forms, but the core way is to add useState for each piece of form element that takes in user input. There are many ways to do this:\n\nWe could have just a single object in your state and have all the fields of your form in that object.\nor you could have state for each fields in your form.\n\nBelow is an example of how you could add state to each of the form fields and access the user-inputed values from your form. \nWhen you add a piece of state to an input, you need to add onChange, because when you change the input, the state has to update and it has to call the function to change its state. The onChange attribute takes a function. The function has an event parameter (usually we would use the variable e). And this event parameter has e.target.value which stores the inputed data. The syntax for onChange is: onChange={(e) =&gt; setFuntion(e.target.value)}. Where setFunction is the function we defined to update the value for our useState().\nTo have javascript automatically navigate to other pages, eg after sending form, we want to redirect to the /jobs page: \nSending function as arg and calling the function in another component. \nExample on how to create a post request in javascript \nExample on how to send api delete request in javascript \nTo start the production server, run in terminal npm run build. This will create another folder called dist in the project repo - this stores your production builds. And to run the production server, we run npm run preview. This is possible because of we have stated the commands in the package.json."
  },
  {
    "objectID": "blog/feed_forward_nn_in_excel.html",
    "href": "blog/feed_forward_nn_in_excel.html",
    "title": "Neural Network from scratch using Excel",
    "section": "",
    "text": "Built (and train) simple neural network using Excel solver\nLet‚Äôs make a simple neural network using Excel. We are using the classic Iris dataset for this exercise.\nThe dataset has 6 columns and 150 rows. It is a balanced dataset with 3 categorical targets (Iris-setosa, Iris-versicolor, Iris-virginica) with 50 rows belonging to each target species. We are trying to predict the flower species of each row, based on its physical attributes (SepalLengthCm, SepalWidthCm, PetalLengthCm, PetalWidthCm)."
  },
  {
    "objectID": "blog/feed_forward_nn_in_excel.html#matrix-multiplication",
    "href": "blog/feed_forward_nn_in_excel.html#matrix-multiplication",
    "title": "Neural Network from scratch using Excel",
    "section": "Matrix Multiplication",
    "text": "Matrix Multiplication\n 1. We can also achieve the same thing using matrix multiplication formula MMULT(all cells in features table, all cells in params table). Notice that our PARAMS now is transposed. Previously our coefficient values are in row 6 and 7, now they are in column I and J. \n\nHere is the result from solver. Notice that we get the same result (0.03) as previous."
  },
  {
    "objectID": "blog/frontend_crash_course_part4.html",
    "href": "blog/frontend_crash_course_part4.html",
    "title": "Front-end Web Dev Crash Course Part 4/4",
    "section": "",
    "text": "This is part 4/4 notes of a Youtube Front-end web development crash course."
  },
  {
    "objectID": "blog/frontend_crash_course_part4.html#responsive-web-design",
    "href": "blog/frontend_crash_course_part4.html#responsive-web-design",
    "title": "Front-end Web Dev Crash Course Part 4/4",
    "section": "Responsive Web Design",
    "text": "Responsive Web Design\n\nIf a user hurt their eyes looking at your webpage ‚Äì you are not designing reponsibly & your webpage is not responsive.\nRule of thumb:\n\nBody of text needs to generally be 700px, in the middle of the screen, and narrow enough for your eyes not to have to move great distances to read it. It should not be the full length of a desktop device.\nContent must be full width on mobile screen. You don‚Äôt want them in 2 columns.\nNavbar and links should not be overlapped.\nNavbar should not be on the very edges of the page, should be center align with the content of the webpage.\nIf page width is narrower than the length of navbar links, then have the navbar links be in dropdown of a navigation menu. \n\nMobile-first vs Desktop-first web design:\n\nMobile-first vs Desktop-first has nothing to do with the design phase but has everything to do with when you start writing the CSS and when you put together the breakpoint (breakpoint = where the desktop webpage convert to mobile webpage)\nMedia query with CSS\nBreakpoint - Eg if you want a breakpoint at 600px, then as the width of the screen gets bigger or smaller than 600px, you want to have different CSS rule for both of them.\nIn general,\n\nMobile device will be somewhere in the range of 320px - 480px wide.\nTablets have between 600px - 800px wide.\nNormal size latop between 1024px - 1440px wide.\nBig desktops is around 2500px wide.\n\nIn mobile-first design, all the default CSS rules are for mobile, and we use min-width condition when specifying media query. We specify the media query from small screen ‚Äì&gt; large screen. With mobile being the default.\nIn desktop-first design, all the default CSS rules are for desktop, and we use max-width condition when specifying media query. We specify the media query from big screen ‚Äì&gt; small screen. With dektop being the default.\nThe concensus in dev community is to do mobile-first design because mobile design will most likely look good on a desktop, whereas desktop design would most likely not look good on a mobile.\nBelow is comparison between mobile-first and desktop-first CSS rules.\n\n\n\n\n\nimage-2.png"
  },
  {
    "objectID": "blog/frontend_crash_course_part4.html#questions-for-deciding-breakpoints",
    "href": "blog/frontend_crash_course_part4.html#questions-for-deciding-breakpoints",
    "title": "Front-end Web Dev Crash Course Part 4/4",
    "section": "3 questions for deciding breakpoints",
    "text": "3 questions for deciding breakpoints\n\nWill this webpage be used on a mobile device often?\n\nIf you know the webpage will not be used much on a mobile device, then you should not waste your time designing a pleasing mobile experience. You should just tell your users to use the application on desktop.\nAre you providing a mobile application, then you don‚Äôt need to put quite as much time and thought on how it looks on different screens.\n\nIs a detailed mobile, tablet, desktop design important?\n\nIf you have just a basic website with some text on it and not a lot of images, then it may not be that important to have a bunch of breakpoinst. You might be able to get away with one design for all devices and it‚Äôll work just fine.\n\nAre there breakpoint ‚Äústandards‚Äù we can use?\n\nScreen sizes are constantly changing as new physical device are released to the world, so there are not much industry standards that we can use.\nIt is a good idea to piggyback on frameworks for breakpoints because the developer of these frameworks had done a lot of thinking on breakpoints, in order to incorporate breakpoints into the framework.\n\n\n\nWriting breakpoint rule:\n\nSyntax: with logical operators\n\n@media \n    only screen\n    and (condition1) and (conditionN) {\n\n        your CSS rule here\n\n    }\n\nSyntax: without logical operators\n\n@media (condition)\n{\n    your CSS rule here\n}\n\nFor example below, we set breakpoint rule for screen between 400-600px to change the color of &lt;h1&gt; tag to red.\n\n@media\n    only screen\n    and (min-width: 400px)\n    and (max-width: 600px) \n{\n\n    h1 {\n        color: red;\n    }\n\n}\n\n\n\n\nimage.png\n\n\nThe order in which we define the breakpoint matters (should place rules for the biggest screen size at the bottom most ‚Äì if we‚Äôre using mobile-first approach ie setting condition using min-width).\n\nThis is because CSS is read from top to bottom.\nSo what will happen is, the default rule is read, and img are set to 100% of the width. Then it continue on reading the next rule which says if the width is greater than 576px, then make the img to be 49%, so it will check the width and resize. Then lastly it reads the last rule and check the width and resize if needed.\nIf we put the rule for min-width: 992px on before the rule for min-width: 576px, then even say the window size is 1000px, the last rule of min-width: 576px still applies, because 1000px &gt; 576px, and so it will apply the last (most recent) rule it reads.\n\n\n - We should always place the media query @media at the very bottom of the CSS stylesheet otherwise our media query will be overrode by the default CSS style we set. - The only thing we need to take care of when writing media query is layout related properties, everything else (eg color, fonts, background images etc should stay the same, so we don‚Äôt need to rewrite all CSS rules)."
  },
  {
    "objectID": "blog/frontend_crash_course_part4.html#tips",
    "href": "blog/frontend_crash_course_part4.html#tips",
    "title": "Front-end Web Dev Crash Course Part 4/4",
    "section": "Tips",
    "text": "Tips\n\nYou should separate the design phase and coding phase when you are building website. You don‚Äôt want to get into situations where you‚Äôre trying to design something and code it at the exact same time.\n\nBefore you write any code, have a basic visual representation of what you‚Äôre trying to do.\nAt least have wireframe design ‚Äì the goal of wireframe is just to get a general idea of where elements should be arranged based on the size of the screen.\nYou can do mockup in Figma.\n\nDifferences between wireframe vs mockup?\n\nWireframe doesn‚Äôt care about the colors, font. It just take care about the layout of the page.\nMockup is full representation of what you‚Äôre trying to do.\n\nWhat to do when you don‚Äôt have any design skills? There are 3 options:\n\nYou can hire a designer and have them design for you\nBrowse the internet for free designs"
  },
  {
    "objectID": "blog/frontend_crash_course_part4.html#css-frameworks",
    "href": "blog/frontend_crash_course_part4.html#css-frameworks",
    "title": "Front-end Web Dev Crash Course Part 4/4",
    "section": "CSS Frameworks",
    "text": "CSS Frameworks\n\nBootstrap is a long-standing CSS framework.\n\nHas standard set of breakpoints.\nBootstrap is mobile-first: we are first designing the CSS for a mobile device. Below is the standard breakpoints for Bootstrap. \n\n\n\n\n\nimage.png"
  },
  {
    "objectID": "blog/frontend_crash_course_part4.html#reference",
    "href": "blog/frontend_crash_course_part4.html#reference",
    "title": "Front-end Web Dev Crash Course Part 4/4",
    "section": "Reference",
    "text": "Reference\n\nScreen Siz.es: Viewport sizes of various devices.\nBootstrap/Breakpoints: Bootstrap documentation avaialble breakpoints\nMDN/At-rules: CSS statements that instruct them how to behave, we use this to define breakpoint rules"
  },
  {
    "objectID": "blog/frontend_crash_course_part4.html#flexbox",
    "href": "blog/frontend_crash_course_part4.html#flexbox",
    "title": "Front-end Web Dev Crash Course Part 4/4",
    "section": "Flexbox",
    "text": "Flexbox\n\nCSS properties can be grouped into 2 categories:\n\nLayout related properties\n\nThis is what we use to create navbars, footers, sidebars etc\n\nStyle related properties eg color, font\n\nFlexbox and CSS Grid provide us a better model for doing layouts so we don‚Äôt have to hack our way in order to make items fit into containers (like we‚Äôve done previously having to delete whitespace from our HTML code).\nWhat is Flexbox:\n\na layout model for displaying items in a single dimension - as a row or as a column.\n\nWhat is CSS Grid:\n\nA 2-dimensional layout model within CSS\n\nDefault block container vs Flexbox:\n\nDefault display: block; \nFlexbox enabled on parent container -&gt; Now the parent container become flex container and all children become flex items. \n\nWhen we turn a container to a flex container, only its direct children will become flex items (not all of its descendents). This is shown below where the third flex item‚Äôs children is of default block display and not flex items. (We know it is of display block because they all aligned on a new line each, and also we can confirm that we did not set display property to its parent ‚Äì so the default display: block; is applied here) \nTo turn the children of the #item-3 to be flex items, we target #item-3 and give it display: flex; property. Now we can see that its children line up next to each other. Notice that now #item-3 is both a flex item (because its parent is a flex container) and also a flex container (because we set display: flex ‚Äì therefore its 3 direct children #sub-item are all flex items.) \nIt is important to know if the container we‚Äôre dealing with is a flex container or a flex item. And that in some cases, an element can be both a flex container (with respect to its direct children) and a flex item (with respect to its parent) at the same time.\nIn reality, as soon as we set display: flex;, it sets a bunch of properties that comes with flexbox by default ‚Äì it is important to be aware of this because this essentially changes the way our containers will behave.\n\n\n\n\nimage-5.png\n\n\n\nDefault properties of a flex container. All below properties will be automatically set (to a flex container) when we set display: flex; to itself.\n\nflex-direction: row;\njustify-content: normal;\nalign-content: normal;\nalign-items: normal;\nflex-wrap: nowrap;\n\nDefault properties of a flex item. All below properties will be automatically set (to a flex item) when we set its display: flex; to its parent.\n\nalign-self: auto;\nflex-grow: 0;\nflex-shrink: 1;\nflex-basis: auto;\n\nFlex shorthand\n\nflex: 0 1 auto;\n\n/* is equivalent to */\nflex-grow: 0;\nflex-shrink: 1;\nflex-basis: auto;"
  },
  {
    "objectID": "blog/frontend_crash_course_part4.html#flex-container-properties",
    "href": "blog/frontend_crash_course_part4.html#flex-container-properties",
    "title": "Front-end Web Dev Crash Course Part 4/4",
    "section": "Flex Container Properties",
    "text": "Flex Container Properties\n\ndisplay\n\ndisplay: flex; : convert a contrainer into a flex container and all its direct children into flex item(s).\n\n\n\nflex-direction\n\ndefine what we‚Äôll be using as main axis and (subsequently what we‚Äôll be using as cross axis)\nflex-direction: row; is the default value. If row is chosen, each of flex item will be align on a new column each (so per flex item is spread across row). \nIf column is chosen, each of the flex item will be align on a new row each (append downward, so per flex item is spread across column). \n\n\n\njustify-content\n\nTells us how the flex items are spaced-out and aligned on the main axis.\njustify-content: normal; is the default value. Make all the content of a flex container to be justified from the start of flex container (left hand side for flex-direction: row). We can achieve the same setting with justify-content: start; \njustify-content: end; will make all the content of a flex container to be justified from the end of a flex container (right hand side for flex-direction: row). \nIf flex-direction: column is set, then justify-content: start will be from first row, and justify-content: end will be from the last row. \njustify-content: center aligns the flex items from the middle of the parent container. \njustify-content: space-between puts whitespace in between flex items. justify-content: space-around puts whitespace surrrounding flex items.  ### align-items\nalign-items: normal; is the default value. When applied to flex container, both of these are the same align-items: normal == align-items: stretch. This normal/stretch stretches the height of flex items to be the total height of the flex container (unless you have specific heights set on the flex items already). Flex items respect width and height if we already set it - so long it does not overflow from the flex container.  ### flex-wrap\nImagine we have this problem where our flex items are overflowing out of our flex container. We have 2 options to fix this: \n\n\nSet overflow: auto;. This is a generic solution that can be used with any display type (not only display: flex). This will give us a scrollbar. \n\n\nSet flex-wrap: wrap;  ### align-content\n\n\nUse this property when we want to align (group of) wrapped flex items. This should have the similar behaviour as align-items but when we set flex-wrap: wrap, align-items no longer work on grouped wrapped items. We have to use align-content instead. Eg below is align-content: flex-start \nalign-content: center \n\n\nOverview\n\nRelationship between justify-content + align-items \nHow to calculate how many flex items can fit inside a flex container"
  },
  {
    "objectID": "blog/frontend_crash_course_part4.html#flex-item-properties",
    "href": "blog/frontend_crash_course_part4.html#flex-item-properties",
    "title": "Front-end Web Dev Crash Course Part 4/4",
    "section": "Flex Item Properties",
    "text": "Flex Item Properties\n\nBy default, the width of a flex item is determine by its inner content, and its height is stretched to be equal to the total height of its parent (a flex container). ### align-self\nSame as align-items but act on a single flex item instead of the whole container of flex items.\nDefault value is align-self: flex-start;  ### order\nTo rearrange the ordering of flex-items, we can directly do it in CSS without having to change the ordering from HTML \nMight be useful when you design responsive webpage, eg as user resize the page, you may want certain element to be in certain order, eg you have sidebar, navbar, header, footer ‚Äì maybe you want to order them differently depending on whether you‚Äôre on a desktop or mobile device.  ### flex-grow \nUse flex-grow to allocate empty space to flex items  ### flex-shrink\nUse flex-shrink to shrink overflow width from flex items \nFlex item can only shrink up to a certain cut off (usually happened when px to shrink exceed minimum required px of a flex item.)\nTo have flex item retain their original width (no shrinking), we can set flex-shrink: 0 which is not the default. ### flex-basis\nAnother way to allocate extra width.\nDefault value is flex-basis: auto; which says, if there is width and height assigned to the flex item, respect those width and height.\nCan use px or % to overide the width and height to the flex item.\nflex-basis take precedence to flex-grow."
  },
  {
    "objectID": "blog/frontend_crash_course_part4.html#reference-1",
    "href": "blog/frontend_crash_course_part4.html#reference-1",
    "title": "Front-end Web Dev Crash Course Part 4/4",
    "section": "Reference",
    "text": "Reference\n\nMDN/Flexbox: MDN Flexbox documentation\nMDN/Flexbox Glossary: List of flexbox properties\nyoksel/Flexbox Cheatsheet: Interactive flexbox cheatsheet"
  },
  {
    "objectID": "blog/suffix_array.html",
    "href": "blog/suffix_array.html",
    "title": "Suffix Array",
    "section": "",
    "text": "db = \"GCATCGC\"\n\n\nSuffix Array\nOne motivation behind suffix array is that any position in our database that is a match to any substring of our query sequence can be thought of as the beginning of a suffix.\n\n\n\nimage.png\n\n\nTo illustrate: If we wanted to query the sequence C in database of GCATCGC then there would be 3 matching suffixes. 1. One suffix starts from the first C character at index 1. 2. The second suffix starts from the second C character at index 4. 3. The third suffix starts from the third C character at index 6.\nTo be able to do this, we first need to create an array of suffixes starting at each character of our database, then sort the array of suffixes alphabetically.\n\nsuffixes = {i:db[i:] for i,c in enumerate(db)}\nprint('Suffixes:\\t\\t', suffixes)\n\nSuffixes:        {0: 'GCATCGC', 1: 'CATCGC', 2: 'ATCGC', 3: 'TCGC', 4: 'CGC', 5: 'GC', 6: 'C'}\n\n\n\nsorted_suffixes = {k: v for k, v in sorted(suffixes.items(), key=lambda item: item[1])}\nsorted_suffix_keys = list(sorted_suffixes.keys())\nprint('Sorted Suffixes:\\t', sorted_suffixes)\nprint('Sorted Suffix Keys:\\t', sorted_suffix_keys)\n\nSorted Suffixes:     {2: 'ATCGC', 6: 'C', 1: 'CATCGC', 4: 'CGC', 5: 'GC', 0: 'GCATCGC', 3: 'TCGC'}\nSorted Suffix Keys:  [2, 6, 1, 4, 5, 0, 3]\n\n\n\n\nSuffix Array Search\nWe can do pattern matching on suffix array using binary search. Below we tried to search for suffixes matching the query GC.\n\nquery = 'GC'\nlow = 0\nhigh = len(suffixes) - 1\nfound = False\n\nwhile high &gt; low and not found:\n    mid = (low + high) // 2\n    \n    mid_key = sorted_suffix_keys[mid]\n    low_key = sorted_suffix_keys[low]\n    high_key = sorted_suffix_keys[high]\n\n    if query == suffixes[mid_key][:len(query)]:\n        found = True\n        while query not in suffixes[low_key][:len(query)] and suffixes[low_key][:len(query)] &lt; query and low &lt; mid:\n            low += 1\n        while query not in suffixes[high_key][:len(query)] and suffixes[high_key][:len(query)] &gt; query and high &gt; mid:\n            high -= 1\n        \n    elif suffixes[mid_key][:len(query)] &gt; query:\n        high = mid - 1\n        if high &lt; 0:\n            print('out of bound, not found')\n    elif suffixes[mid_key][:len(query)] &lt; query:\n        low = mid + 1\n        if low &gt;= len(suffixes):\n            print('out of bound, not found')\n\nprint('-'*100)\nprint('Query:\\n', query)\nprint('Original database:\\n', db)\nprint('Sorted suffix array:\\n', sorted_suffixes, '\\n')\nif found:\n    low_key = sorted_suffix_keys[low]\n    high_key = sorted_suffix_keys[high]\n    print(f'Query \"{query}\" has a match at positions in the sorted suffix array:\\t[{low_key}: {high_key}]')\nelse:\n    print(f'No match found for query {query}.')\nprint('-'*100)\n\n----------------------------------------------------------------------------------------------------\nQuery:\n GC\nOriginal database:\n GCATCGC\nSorted suffix array:\n {2: 'ATCGC', 6: 'C', 1: 'CATCGC', 4: 'CGC', 5: 'GC', 0: 'GCATCGC', 3: 'TCGC'} \n\nQuery \"GC\" has a match at positions in the sorted suffix array: [5: 0]\n----------------------------------------------------------------------------------------------------\n\n\nLet‚Äôs make this as a function and do searching on some more queries.\n\ndef get_suffixes(db:str) -&gt; tuple:\n    \"\"\"Create suffix array and sort it in alphabetical order by the suffix sequences\"\"\"\n    suffixes = {i:db[i:] for i,c in enumerate(db)}\n    sorted_suffixes = {k: v for k, v in sorted(suffixes.items(), key=lambda item: item[1])}\n    return suffixes, sorted_suffixes\n\ndef query_suffix_array(query:str, db:str, verbose:bool=False) -&gt; list:\n    \"\"\"Search for query in the preprocessed suffix array using binary search.\n    Returns a list of matched suffix sequences.\n    \"\"\"\n\n    suffixes, sorted_suffixes = get_suffixes(db)\n    sorted_suffix_keys = list(sorted_suffixes.keys())\n    \n    low = 0\n    high = len(suffixes) - 1\n    found = False\n    \n    while high &gt; low and not found:\n        mid = (low + high) // 2\n        \n        mid_key = sorted_suffix_keys[mid]\n        low_key = sorted_suffix_keys[low]\n        high_key = sorted_suffix_keys[high]\n        if verbose: print('low key', low_key, 'mid key', mid_key, 'high key', high_key)\n    \n        if query == suffixes[mid_key] or query in suffixes[mid_key][:len(query)]:\n            found = True\n            while query not in suffixes[low_key][:len(query)] and suffixes[low_key] &lt; query and low &lt; mid:\n                low += 1\n                low_key = sorted_suffix_keys[low]\n                \n                if verbose: print('found bound, new low', sorted_suffix_keys[low])\n                if query == suffixes[low_key][:len(query)]:\n                    break\n            while query not in suffixes[high_key][:len(query)] and suffixes[high_key] &gt; query and high &gt; mid:\n                high -= 1\n                high_key = sorted_suffix_keys[high]\n                \n                if verbose: print('found bound, new high1', sorted_suffix_keys[high])\n                if query == suffixes[high_key][:len(query)]:\n                    break\n\n            while query in suffixes[sorted_suffix_keys[high+1]][:len(query)]:\n                high += 1\n                if verbose: print('found bound, new high2', sorted_suffix_keys[high])\n            \n        elif suffixes[mid_key] &gt; query:\n            high = mid\n            if verbose: print('move high=mid')\n            if high &lt; 0:\n                print('out of bound, not found')\n        elif suffixes[mid_key] &lt; query:\n            low = mid\n            if verbose: print('move low=mid')\n            if low &gt;= len(suffixes):\n                print('out of bound, not found')\n\n    print('-'*100)\n    print('Query:\\n', query)\n    print('Original database:\\n', db)\n    print('Sorted suffix array:\\n', sorted_suffixes, '\\n')\n    \n    if found:\n        low_key = sorted_suffix_keys[low]\n        high_key = sorted_suffix_keys[high]\n        result = [low_key, high_key]\n\n        start_result_index = sorted_suffix_keys.index(result[0])\n        end_result_index = sorted_suffix_keys.index(result[1])\n        result_keys = sorted_suffix_keys[start_result_index : end_result_index+1]\n        matched_result = [sorted_suffixes[k] for k in sorted_suffixes if k in result_keys]\n        \n        print('-'*100)\n        print(f'Query \"{query}\" has a match at positions in the sorted suffix array:\\t[{low_key}: {high_key}]')\n        print('Matched suffixes:\\t', matched_result)\n        print('-'*100)\n        return matched_result\n        \n    \n    print('-'*100)\n    print(f'No match found for query {query}.')\n    print('-'*100)\n    return []\n    \n    \n\n\nquery = \"ACC\"\nquery_suffix_array(query, db)\n\n----------------------------------------------------------------------------------------------------\nQuery:\n ACC\nOriginal database:\n GCATCGC\nSorted suffix array:\n {2: 'ATCGC', 6: 'C', 1: 'CATCGC', 4: 'CGC', 5: 'GC', 0: 'GCATCGC', 3: 'TCGC'} \n\n----------------------------------------------------------------------------------------------------\nNo match found for query ACC.\n----------------------------------------------------------------------------------------------------\n\n\n[]\n\n\n\nquery = \"C\"\nquery_suffix_array(query, db)\n\n----------------------------------------------------------------------------------------------------\nQuery:\n C\nOriginal database:\n GCATCGC\nSorted suffix array:\n {2: 'ATCGC', 6: 'C', 1: 'CATCGC', 4: 'CGC', 5: 'GC', 0: 'GCATCGC', 3: 'TCGC'} \n\n----------------------------------------------------------------------------------------------------\nQuery \"C\" has a match at positions in the sorted suffix array:  [6: 4]\nMatched suffixes:    ['C', 'CATCGC', 'CGC']\n----------------------------------------------------------------------------------------------------\n\n\n['C', 'CATCGC', 'CGC']\n\n\n\nquery = \"AT\"\nquery_suffix_array(query, db)\n\n----------------------------------------------------------------------------------------------------\nQuery:\n AT\nOriginal database:\n GCATCGC\nSorted suffix array:\n {2: 'ATCGC', 6: 'C', 1: 'CATCGC', 4: 'CGC', 5: 'GC', 0: 'GCATCGC', 3: 'TCGC'} \n\n----------------------------------------------------------------------------------------------------\nQuery \"AT\" has a match at positions in the sorted suffix array: [2: 2]\nMatched suffixes:    ['ATCGC']\n----------------------------------------------------------------------------------------------------\n\n\n['ATCGC']\n\n\nReferences & Credits: 1. Advance Data Structures: Suffix Arrays 1. Advance Data Structures: Suffix Array Search"
  }
]